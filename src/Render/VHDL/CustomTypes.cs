// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace SME.Render.VHDL {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class CustomTypes : CustomTypesBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 6 ""
            this.Write("\nlibrary IEEE;\nuse IEEE.STD_LOGIC_1164.ALL;\nuse IEEE.NUMERIC_STD.ALL;\n\nlibrary SYSTEM_TYPES;\nuse work.SYSTEM_TYPES.ALL;\n\n-- User defined packages here\n-- #### USER-DATA-IMPORTS-START\n-- #### USER-DATA-IMPORTS-END\n\npackage CUSTOM_TYPES is\n\n-- User defined types here\n-- #### USER-DATA-CORETYPES-START\n-- #### USER-DATA-CORETYPES-END\n\n");
            
            #line default
            #line hidden
            
            #line 24 ""
 foreach(var t in Types) {
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(t.Type));
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(Renderer.ConvertToValidVHDLName(t.Name)));
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write(" is\n");
            
            #line default
            #line hidden
            
            #line 26 ""
     foreach(var f in t.Members) { 
            
            #line default
            #line hidden
            
            #line 27 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 27 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( f ));
            
            #line default
            #line hidden
            
            #line 27 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 28 ""
     } 
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 30 ""
 } 
            
            #line default
            #line hidden
            
            #line 31 ""
 if (BusArrays.Any()) { 
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("    -- Bus array definitions\n");
            
            #line default
            #line hidden
            
            #line 33 ""
     foreach(var t in BusArrays) {
            
            #line default
            #line hidden
            
            #line 34 ""
         if (t.Item2.IsSystemType) { 
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write("    subtype ");
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(Renderer.ConvertToValidVHDLName(t.Item1)));
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write("_type is ");
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(Renderer.ConvertToValidVHDLName(t.Item2.ToString())));
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write("_ARRAY(0 to ");
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(t.Item3));
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write(" - 1);\n");
            
            #line default
            #line hidden
            
            #line 36 ""
         } else { 
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write("    type ");
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(Renderer.ConvertToValidVHDLName(t.Item1)));
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write("_type is array (0 to ");
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(t.Item3));
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(" - 1) of ");
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(Renderer.ConvertToValidVHDLName(t.Item2.ToString())));
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 38 ""
         } 
            
            #line default
            #line hidden
            
            #line 39 ""
     } 
            
            #line default
            #line hidden
            
            #line 40 ""
 } 
            
            #line default
            #line hidden
            
            #line 41 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 42 ""
 foreach(var enumtype in EnumTypes) { 
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write("    -- converts ");
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( enumtype ));
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write(" into a string\n    pure function str(b: ");
            
            #line default
            #line hidden
            
            #line 44 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( enumtype ));
            
            #line default
            #line hidden
            
            #line 44 ""
            this.Write(") return string;\n");
            
            #line default
            #line hidden
            
            #line 45 ""
 } 
            
            #line default
            #line hidden
            
            #line 46 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 47 ""
 if (Constants.Count() > 0) { 
            
            #line default
            #line hidden
            
            #line 48 ""
            this.Write("    -- Constant definitions\n");
            
            #line default
            #line hidden
            
            #line 49 ""
 } 
            
            #line default
            #line hidden
            
            #line 50 ""
 foreach(var c in Constants) { 
            
            #line default
            #line hidden
            
            #line 51 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 51 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( c ));
            
            #line default
            #line hidden
            
            #line 51 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 52 ""
 } 
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write("\n\n-- User defined types here\n-- #### USER-DATA-TRAILTYPES-START\n-- #### USER-DATA-TRAILTYPES-END\n\n\nend CUSTOM_TYPES;\n\npackage body CUSTOM_TYPES is\n");
            
            #line default
            #line hidden
            
            #line 63 ""
 foreach(var enumtype in EnumTypes) { 
            
            #line default
            #line hidden
            
            #line 64 ""
            this.Write("    -- converts ");
            
            #line default
            #line hidden
            
            #line 64 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( enumtype ));
            
            #line default
            #line hidden
            
            #line 64 ""
            this.Write(" into a string\n    pure function str(b: ");
            
            #line default
            #line hidden
            
            #line 65 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( enumtype ));
            
            #line default
            #line hidden
            
            #line 65 ""
            this.Write(") return string is\n    begin\n        return ");
            
            #line default
            #line hidden
            
            #line 67 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( enumtype ));
            
            #line default
            #line hidden
            
            #line 67 ""
            this.Write("'image(b);\n    end str;\n");
            
            #line default
            #line hidden
            
            #line 69 ""
 } 
            
            #line default
            #line hidden
            
            #line 70 ""
            this.Write("\n-- User defined bodies here\n-- #### USER-DATA-BODY-START\n-- #### USER-DATA-BODY-END\n\nend CUSTOM_TYPES;");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class CustomTypesBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
