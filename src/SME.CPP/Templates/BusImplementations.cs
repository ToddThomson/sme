// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace SME.CPP.Templates {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class BusImplementations : BusImplementationsBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 1 ""
            this.Write("﻿");
            
            #line default
            #line hidden
            
            #line 6 ""
            this.Write("#include <iostream>\n#include <cstring>\n#include \"");
            
            #line default
            #line hidden
            
            #line 8 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.BusDefinitionsFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 8 ""
            this.Write("\"\n\n// Insert additional includes here\n// #### USER-DATA-INCLUDE-START\n// #### USER-DATA-INCLUDE-END\n\n");
            
            #line default
            #line hidden
            
            #line 14 ""
 foreach(var bus in Network.Busses) { 
            
            #line default
            #line hidden
            
            #line 15 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 16 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 16 ""
            this.Write("::");
            
            #line default
            #line hidden
            
            #line 16 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 16 ""
            this.Write(" () {\n");
            
            #line default
            #line hidden
            
            #line 17 ""
     foreach(var signal in bus.Signals) {
           var cpptype = RS.TypeScope.GetType(signal);
           if (cpptype.IsArray) {
               var eltype = cpptype.ElementName;

               string arraylen = string.Empty;

               if (signal.DefaultValue is SME.AST.ArrayCreateExpression)
                   arraylen = (signal.DefaultValue as SME.AST.ArrayCreateExpression).ElementExpressions.Length.ToString();
               else if (signal.DefaultValue is SME.AST.EmptyArrayCreateExpression)
                   arraylen = RS.Renderer.RenderExpression((signal.DefaultValue as SME.AST.EmptyArrayCreateExpression).SizeExpression);
               else
                   arraylen = RS.GetArrayLength(signal).DefaultValue.ToString();

            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write("    \n    size_");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(" = ");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( arraylen ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(";\n    valid_");
            
            #line default
            #line hidden
            
            #line 33 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 33 ""
            this.Write(" = new bool[size_");
            
            #line default
            #line hidden
            
            #line 33 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 33 ""
            this.Write("];\n    written_");
            
            #line default
            #line hidden
            
            #line 34 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 34 ""
            this.Write(" = new bool[size_");
            
            #line default
            #line hidden
            
            #line 34 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 34 ""
            this.Write("];\n    staged_");
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write(" = new bool[size_");
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write("];\n\n    write_");
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(" = new ");
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write("[size_");
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write("];\n    read_");
            
            #line default
            #line hidden
            
            #line 38 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 38 ""
            this.Write(" = new ");
            
            #line default
            #line hidden
            
            #line 38 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));
            
            #line default
            #line hidden
            
            #line 38 ""
            this.Write("[size_");
            
            #line default
            #line hidden
            
            #line 38 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 38 ""
            this.Write("];\n\n    std::memset(written_");
            
            #line default
            #line hidden
            
            #line 40 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 40 ""
            this.Write(", 0, size_");
            
            #line default
            #line hidden
            
            #line 40 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 40 ""
            this.Write(" * sizeof(bool));\n    std::memset(staged_");
            
            #line default
            #line hidden
            
            #line 41 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 41 ""
            this.Write(", 0, size_");
            
            #line default
            #line hidden
            
            #line 41 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 41 ""
            this.Write(" * sizeof(bool));\n");
            
            #line default
            #line hidden
            
            #line 42 ""
             if (signal.DefaultValue == null) { 
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write("    std::memset(valid_");
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write(", 0, size_");
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write(" * sizeof(bool));\n");
            
            #line default
            #line hidden
            
            #line 44 ""
             } else { 
            
            #line default
            #line hidden
            
            #line 45 ""
            this.Write("    std::memset(valid_");
            
            #line default
            #line hidden
            
            #line 45 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 45 ""
            this.Write(", 1, size_");
            
            #line default
            #line hidden
            
            #line 45 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 45 ""
            this.Write(" * sizeof(bool));\n");
            
            #line default
            #line hidden
            
            #line 46 ""
                 if ((signal.DefaultValue is SME.AST.ArrayCreateExpression)) { 
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(" orig_");
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write("[]");
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Renderer.GetInitializer(signal) ));
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(";\n    std::memcpy(read_");
            
            #line default
            #line hidden
            
            #line 48 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 48 ""
            this.Write(", orig_");
            
            #line default
            #line hidden
            
            #line 48 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 48 ""
            this.Write(", ");
            
            #line default
            #line hidden
            
            #line 48 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( arraylen ));
            
            #line default
            #line hidden
            
            #line 48 ""
            this.Write(" * sizeof(");
            
            #line default
            #line hidden
            
            #line 48 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));
            
            #line default
            #line hidden
            
            #line 48 ""
            this.Write("));\n");
            
            #line default
            #line hidden
            
            #line 49 ""
                 } 
            
            #line default
            #line hidden
            
            #line 50 ""
             } 
            
            #line default
            #line hidden
            
            #line 51 ""
         } else { 
            
            #line default
            #line hidden
            
            #line 52 ""
            this.Write("    written_");
            
            #line default
            #line hidden
            
            #line 52 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 52 ""
            this.Write(" = false;\n");
            
            #line default
            #line hidden
            
            #line 53 ""
             if (signal.DefaultValue == null) { 
            
            #line default
            #line hidden
            
            #line 54 ""
            this.Write("    valid_");
            
            #line default
            #line hidden
            
            #line 54 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 54 ""
            this.Write(" = false;\n");
            
            #line default
            #line hidden
            
            #line 55 ""
             } 
            
            #line default
            #line hidden
            
            #line 56 ""
         } 
            
            #line default
            #line hidden
            
            #line 57 ""
     } 
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 59 ""
     foreach(var signal in bus.Signals.Where(x => x.DefaultValue != null)) { 
           var cpptype = RS.TypeScope.GetType(signal);
           var ini = RS.Renderer.GetInitializer(signal);

           if (!cpptype.IsArray) { 
            
            #line default
            #line hidden
            
            #line 64 ""
            this.Write("    valid_");
            
            #line default
            #line hidden
            
            #line 64 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 64 ""
            this.Write(" = true;\n");
            
            #line default
            #line hidden
            
            #line 65 ""
         } 
            
            #line default
            #line hidden
            
            #line 66 ""
         if (!string.IsNullOrWhiteSpace(ini)) { 
            
            #line default
            #line hidden
            
            #line 67 ""
            this.Write("    read_");
            
            #line default
            #line hidden
            
            #line 67 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 67 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Renderer.GetInitializer(signal) ));
            
            #line default
            #line hidden
            
            #line 67 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 68 ""
         } 
            
            #line default
            #line hidden
            
            #line 69 ""
     } 
            
            #line default
            #line hidden
            
            #line 70 ""
            this.Write("}\n\n");
            
            #line default
            #line hidden
            
            #line 72 ""
     foreach(var signal in bus.Signals) { 
           var cpptype = RS.TypeScope.GetType(signal);
           if (cpptype.IsArray) {
               var eltype = cpptype.ElementName;


            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));
            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write("::");
            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write("(size_t index) const {\n    if (index >= size_");
            
            #line default
            #line hidden
            
            #line 79 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 79 ""
            this.Write(")\n        throw IndexOutOfBoundsException(\"Invalid index: ");
            
            #line default
            #line hidden
            
            #line 80 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 80 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 80 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 80 ""
            this.Write("\");\n    if (!valid_");
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write("[index])\n        throw InvalidReadException(\"Invalid read: ");
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write("\");\n\n    return read_");
            
            #line default
            #line hidden
            
            #line 84 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 84 ""
            this.Write("[index];\n}\n\n");
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write("::");
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write("(size_t index, ");
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(" value) {\n    if (index >= size_");
            
            #line default
            #line hidden
            
            #line 88 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 88 ""
            this.Write(")\n        throw IndexOutOfBoundsException(\"Invalid index: ");
            
            #line default
            #line hidden
            
            #line 89 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 89 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 89 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 89 ""
            this.Write("\");\n    if (written_");
            
            #line default
            #line hidden
            
            #line 90 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 90 ""
            this.Write("[index])\n        throw InvalidDoubleWriteException(\"Invalid write: ");
            
            #line default
            #line hidden
            
            #line 91 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 91 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 91 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 91 ""
            this.Write("\");\n\n    staged_");
            
            #line default
            #line hidden
            
            #line 93 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 93 ""
            this.Write("[index] = true;\n    return write_");
            
            #line default
            #line hidden
            
            #line 94 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 94 ""
            this.Write("[index] = value;\n}\n");
            
            #line default
            #line hidden
            
            #line 96 ""
         } else { 
            
            #line default
            #line hidden
            
            #line 97 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Type(signal) ));
            
            #line default
            #line hidden
            
            #line 97 ""
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 97 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 97 ""
            this.Write("::");
            
            #line default
            #line hidden
            
            #line 97 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 97 ""
            this.Write("() const {\n    if (!valid_");
            
            #line default
            #line hidden
            
            #line 98 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 98 ""
            this.Write(")\n        throw InvalidReadException(\"Invalid read: ");
            
            #line default
            #line hidden
            
            #line 99 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 99 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 99 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 99 ""
            this.Write("\");\n\n    return read_");
            
            #line default
            #line hidden
            
            #line 101 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 101 ""
            this.Write(";\n}\n\n");
            
            #line default
            #line hidden
            
            #line 104 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Type(signal) ));
            
            #line default
            #line hidden
            
            #line 104 ""
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 104 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 104 ""
            this.Write("::");
            
            #line default
            #line hidden
            
            #line 104 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 104 ""
            this.Write("(");
            
            #line default
            #line hidden
            
            #line 104 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Type(signal) ));
            
            #line default
            #line hidden
            
            #line 104 ""
            this.Write(" value) {\n    if (written_");
            
            #line default
            #line hidden
            
            #line 105 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 105 ""
            this.Write(")\n        throw InvalidDoubleWriteException(\"Invalid write: ");
            
            #line default
            #line hidden
            
            #line 106 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 106 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 106 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 106 ""
            this.Write("\");\n\n    staged_");
            
            #line default
            #line hidden
            
            #line 108 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 108 ""
            this.Write(" = true;\n    return write_");
            
            #line default
            #line hidden
            
            #line 109 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 109 ""
            this.Write(" = value;\n}\n");
            
            #line default
            #line hidden
            
            #line 111 ""
         } 
            
            #line default
            #line hidden
            
            #line 112 ""
     } 
            
            #line default
            #line hidden
            
            #line 113 ""
            this.Write("\nvoid ");
            
            #line default
            #line hidden
            
            #line 114 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 114 ""
            this.Write("::forward_signals() {\n    size_t i;\n//TODO: Do we need to handle clocked busses here, so they do not\n// forward, or is this done by the DependencyGraph automatically?\n\n");
            
            #line default
            #line hidden
            
            #line 119 ""
     foreach(var signal in bus.Signals) {
           var cpptype = RS.TypeScope.GetType(signal);
           if (cpptype.IsArray) {
               var eltype = cpptype.ElementName; 

            
            #line default
            #line hidden
            
            #line 124 ""
            this.Write("    for(i = 0; i < size_");
            
            #line default
            #line hidden
            
            #line 124 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 124 ""
            this.Write("; i++) {\n        if (staged_");
            
            #line default
            #line hidden
            
            #line 125 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 125 ""
            this.Write("[i]) {\n            written_");
            
            #line default
            #line hidden
            
            #line 126 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 126 ""
            this.Write("[i] = true;\n            staged_");
            
            #line default
            #line hidden
            
            #line 127 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 127 ""
            this.Write("[i] = false;\n            valid_");
            
            #line default
            #line hidden
            
            #line 128 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 128 ""
            this.Write("[i] = true;\n            read_");
            
            #line default
            #line hidden
            
            #line 129 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 129 ""
            this.Write("[i] = write_");
            
            #line default
            #line hidden
            
            #line 129 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 129 ""
            this.Write("[i];\n        }\n    }\n");
            
            #line default
            #line hidden
            
            #line 132 ""
         } else { 
            
            #line default
            #line hidden
            
            #line 133 ""
            this.Write("    if (staged_");
            
            #line default
            #line hidden
            
            #line 133 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 133 ""
            this.Write(") {\n        written_");
            
            #line default
            #line hidden
            
            #line 134 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 134 ""
            this.Write(" = true;\n        staged_");
            
            #line default
            #line hidden
            
            #line 135 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 135 ""
            this.Write(" = false;\n        valid_");
            
            #line default
            #line hidden
            
            #line 136 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 136 ""
            this.Write(" = true;\n        read_");
            
            #line default
            #line hidden
            
            #line 137 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 137 ""
            this.Write(" = write_");
            
            #line default
            #line hidden
            
            #line 137 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 137 ""
            this.Write(";\n    }\n");
            
            #line default
            #line hidden
            
            #line 139 ""
         } 
            
            #line default
            #line hidden
            
            #line 140 ""
     } 
            
            #line default
            #line hidden
            
            #line 141 ""
            this.Write("}\n\nvoid ");
            
            #line default
            #line hidden
            
            #line 143 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 143 ""
            this.Write("::propagate_signals() {\n    size_t i;\n\n");
            
            #line default
            #line hidden
            
            #line 146 ""
     foreach(var signal in bus.Signals) {
           var cpptype = RS.TypeScope.GetType(signal);
           if (cpptype.IsArray) {
               var eltype = cpptype.ElementName; 
            
            #line default
            #line hidden
            
            #line 150 ""
            this.Write("    for (i = 0; i < size_");
            
            #line default
            #line hidden
            
            #line 150 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 150 ""
            this.Write("; i++) {\n        if (written_");
            
            #line default
            #line hidden
            
            #line 151 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 151 ""
            this.Write("[i]) {\n            written_");
            
            #line default
            #line hidden
            
            #line 152 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 152 ""
            this.Write("[i] = false;\n        }\n    }\n");
            
            #line default
            #line hidden
            
            #line 155 ""
         } else { 
            
            #line default
            #line hidden
            
            #line 156 ""
            this.Write("    if (written_");
            
            #line default
            #line hidden
            
            #line 156 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 156 ""
            this.Write(") {\n        written_");
            
            #line default
            #line hidden
            
            #line 157 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 157 ""
            this.Write(" = false;\n    }\n");
            
            #line default
            #line hidden
            
            #line 159 ""
         } 
            
            #line default
            #line hidden
            
            #line 160 ""
     } 
            
            #line default
            #line hidden
            
            #line 161 ""
            this.Write("}\n\n");
            
            #line default
            #line hidden
            
            #line 163 ""
 } 
            
            #line default
            #line hidden
            
            #line 164 ""
            this.Write("\n// Insert additional code and classes here\n// #### USER-DATA-EXTRA-START\n// #### USER-DATA-EXTRA-END\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class BusImplementationsBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
