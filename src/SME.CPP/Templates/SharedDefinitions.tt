﻿<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#ifndef SME_BUSDEFINITIONS_HPP
#define SME_BUSDEFINITIONS_HPP

#include "SystemTypes.hpp"

// Insert additional includes here
// #### USER-DATA-INCLUDE-START
// #### USER-DATA-INCLUDE-END

<# foreach(var bus in Network.Busses) { #>

class <#= bus.Name #> {
private:
<#     foreach(var signal in bus.Signals) { #>
    <#= Type(signal) #> write_<#= signal.Name #>;
    <#= Type(signal) #> read_<#= signal.Name #>;
    bool valid_<#= signal.Name #>;
    bool written_<#= signal.Name #>;
<#     } #>

public:

    <#= bus.Name #> () {
<#     foreach(var signal in bus.Signals.Where(x => x.DefaultValue != null)) { #>
        valid_<#= signal.Name #> = true;
        // TODO: <#= signal.Name #> = ???;
<#     } #>
    }

<#     foreach(var signal in bus.Signals) { #>
    <#= Type(signal) #> <#= signal.Name #>() const {
        if (!valid_<#= signal.Name #>)
            throw new InvalidReadException();

        return read_<#= signal.Name #>;
    }

    <#= Type(signal) #> <#= signal.Name #>(<#= Type(signal) #> value) {
        if (written_<#= signal.Name #>)
            throw new InvalidDoubleWriteException();

        return write_<#= signal.Name #> = value;
    }
<#     } #>

    void forward_signals() {
<#     foreach(var signal in bus.Signals) { #>
        written_<#= signal.Name #> = true;
        valid_<#= signal.Name #> = true;
<#     } #>        
    }

    void propagate_signals() {
<#     foreach(var signal in bus.Signals) { #>
        written_<#= signal.Name #> = false;
        read_<#= signal.Name #> = write_<#= signal.Name #>;
<#     } #>        
    }
};

<# } #>

// Insert additional code and classes here
// #### USER-DATA-EXTRA-START
// #### USER-DATA-EXTRA-END

#endif /* SME_BUSDEFINITIONS_HPP */
