﻿<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SME.AST" #>

#include <iostream>
#include "SystemTypes.hpp"
#include "<#= Naming.BusDefinitionsFileName(Network) #>"
#include "<#= RSP.Process.Name #>.hpp"

// Insert additional includes and methods here
// #### USER-DATA-EXTRA-START
// #### USER-DATA-EXTRA-END


<#
var busses = RSP.Process.InputBusses.Union(RSP.Process.OutputBusses).Union(RSP.Process.InternalBusses).Distinct().OrderBy(x => x.Name).ToArray();
#>

<#= RSP.Process.Name #>::<#= RSP.Process.Name #>(
<# foreach(var bus in busses) { #>
    <#= bus.Name #>* p<#= bus.Name #><#= bus == busses.Last() ? "" : "," #>
<#  } #>
) {
<# foreach(var bus in busses) { #>
    bus_<#= bus.Name #> = p<#= bus.Name #>;
<#  } #>

<# foreach(var v in RSP.Process.SharedVariables.Cast<DataElement>().Union(RSP.Process.SharedSignals)) { 
       var initializer = RS.Renderer.GetInitializer(v);
       if (!string.IsNullOrWhiteSpace(initializer)) { 
           var rt = RS.TypeScope.GetType(v);
           if (rt.IsArray) {
               var eltype = rt.ElementName;
#>
<#             if ((v.DefaultValue is SME.AST.ArrayCreateExpression)) { #>
    <#= v.Name #> = new <#= eltype #>[<#= (v.DefaultValue as SME.AST.ArrayCreateExpression).ElementExpressions.Length #>];
    <#= eltype #> orig_<#= v.Name #>[]<#= initializer #>;
    memcpy(<#= v.Name #>, orig_<#= v.Name #>, <#= (v.DefaultValue as SME.AST.ArrayCreateExpression).ElementExpressions.Length #> * sizeof(<#= eltype #>));
<#             } else { #>
    <#= v.Name #> = new <#= eltype #>[<#= RS.Renderer.RenderExpression((v.DefaultValue as SME.AST.EmptyArrayCreateExpression).SizeExpression) #>]();
<#             } #>
<#         } else { #>
    <#= v.Name #><#= initializer #>;
<#         } #>
<#     } #>
<# } #>

    // Insert additional initialization here
    // #### USER-DATA-INIT-START
    // #### USER-DATA-INIT-END
}

void <#= RSP.Process.Name #>::onTick() {
    // Insert additional pre- clock-tick code here
    // #### USER-DATA-PRE-START
    // #### USER-DATA-PRE-END

<#     foreach(var line in RS.Renderer.RenderMethod(RSP.Process.MainMethod)) { #>
    <#= line #>
<#     } #>

    // Insert additional post- clock-tick code here
    // #### USER-DATA-POST-START
    // #### USER-DATA-POST-END
}