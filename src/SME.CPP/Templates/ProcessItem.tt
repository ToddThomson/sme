﻿<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SME.AST" #>

#include <iostream>
#include <cstring>
#include "<#= RSP.Process.Name #>.hpp"

// Insert additional includes and methods here
// #### USER-DATA-EXTRA-START
// #### USER-DATA-EXTRA-END


<#
var busses = RSP.Process.InputBusses.Union(RSP.Process.OutputBusses).Union(RSP.Process.InternalBusses).Distinct().OrderBy(x => x.Name).ToArray();
#>

<#= RSP.Process.Name #>::<#= RSP.Process.Name #>(
<# foreach(var bus in busses) { #>
    <#= bus.Name #>* p<#= bus.Name #><#= bus == busses.Last() ? "" : "," #>
<#  } #>
) {
<# foreach(var bus in busses) { #>
    bus_<#= bus.Name #> = p<#= bus.Name #>;
<#  } #>

<# foreach(var v in RSP.Process.SharedVariables.Cast<DataElement>().Union(RSP.Process.SharedSignals)) { 
       var initializer = RS.Renderer.GetInitializer(v);
       if (!string.IsNullOrWhiteSpace(initializer)) { 
           var rt = RS.TypeScope.GetType(v);
           if (rt.IsArray) {
               var eltype = rt.ElementName;

               var arraylen = RS.GetArrayLength(v).DefaultValue;

               if ((v.DefaultValue is SME.AST.ArrayCreateExpression)) { #>
    <#= v.Name #> = new <#= eltype #>[<#= arraylen #>];
    <#= eltype #> orig_<#= v.Name #>[]<#= initializer #>;
    std::memcpy(<#= v.Name #>, orig_<#= v.Name #>, <#= arraylen #> * sizeof(<#= eltype #>));
<#             } else { #>
    <#= v.Name #> = new <#= eltype #>[<#= arraylen #>]();
<#             } #>
    size_<#= v.Name #> = <#= arraylen #>;
<#         } else { #>
    <#= v.Name #><#= initializer #>;
<#         } #>
<#     } #>
<# } #>

    // Insert additional initialization here
    // #### USER-DATA-INIT-START
    // #### USER-DATA-INIT-END
}

void <#= RSP.Process.Name #>::onTick() {
    // Insert additional pre- clock-tick code here
    // #### USER-DATA-PRE-START
    // #### USER-DATA-PRE-END

<#     foreach(var line in RS.Renderer.RenderMethod(RSP.Process.MainMethod)) { #>
    <#= line #>
<#     } #>

    // Insert additional post- clock-tick code here
    // #### USER-DATA-POST-START
    // #### USER-DATA-POST-END
}
<# if (RSP.Process.Methods != null && RSP.Process.Methods.Any(x => !x.Ignore)) { #>

// Internal methods
<#     foreach (var s in RSP.Process.Methods.Where(x => !x.Ignore)) { #>
<#
           var rettype = (s.ReturnVariable == null || s.ReturnVariable.CecilType.IsSameTypeReference(typeof(void))) ? "void" : Type(s.ReturnVariable);
#>
<#= rettype #> <#= RSP.Process.Name #>::<#= s.Name #>(<#= string.Join(", ", s.Parameters.Select(x => $"{Type(x)} {x.Name}")) #>) {
<#         foreach(var line in RS.Renderer.RenderMethod(s)) { #>
    <#= line #>
<#         } #>
}
<#     } #>
<# } #>