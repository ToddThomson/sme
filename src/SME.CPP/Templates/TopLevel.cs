// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace SME.CPP.Templates {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class TopLevel : TopLevelBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 1 ""
            this.Write("﻿");
            
            #line default
            #line hidden
            
            #line 6 ""
            this.Write("#include <iostream>\n#include <fstream>\n#include <sstream>\n#include \"SystemTypes.hpp\"\n#include \"");
            
            #line default
            #line hidden
            
            #line 10 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.BusDefinitionsFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 10 ""
            this.Write("\"\n\n");
            
            #line default
            #line hidden
            
            #line 12 ""
 foreach(var process in Network.Processes) { 
            
            #line default
            #line hidden
            
            #line 13 ""
            this.Write("#include \"");
            
            #line default
            #line hidden
            
            #line 13 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( process.Name ));
            
            #line default
            #line hidden
            
            #line 13 ""
            this.Write(".hpp\"\n");
            
            #line default
            #line hidden
            
            #line 14 ""
 } 
            
            #line default
            #line hidden
            
            #line 15 ""
            this.Write("\n// Insert additional includes and methods here\n// #### USER-DATA-INCLUDE-START\n// #### USER-DATA-INCLUDE-END\n\n// The names of all signals\nstd::string SIGNAL_NAMES[] = {\n");
            
            #line default
            #line hidden
            
            #line 22 ""
 foreach (var signal in RS.DriverSignals.Union(RS.VerifySignals)) { 
       var cpptype = RS.TypeScope.GetType(signal);
       if (cpptype.IsArray) {
           var eltype = cpptype.ElementName;
           var length = (int)RS.GetArrayLength(signal).DefaultValue;
           for(var i = 0; i < length; i++) {

            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write("    \"");
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.TestBenchSignalName(signal) ));
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write("(");
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( i ));
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(")\",\n");
            
            #line default
            #line hidden
            
            #line 30 ""
         } 
            
            #line default
            #line hidden
            
            #line 31 ""
     } else { 
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("    \"");
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.TestBenchSignalName(signal) ));
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("\",\n");
            
            #line default
            #line hidden
            
            #line 33 ""
     } 
            
            #line default
            #line hidden
            
            #line 34 ""
 } 
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write("};\n\nvoid RunSimulation(const char* tracefile)\n{\n");
            
            #line default
            #line hidden
            
            #line 39 ""
 foreach(var bus in Network.Busses) { 
            
            #line default
            #line hidden
            
            #line 40 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 40 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 40 ""
            this.Write(" bus_");
            
            #line default
            #line hidden
            
            #line 40 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 40 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 41 ""
 } 
            
            #line default
            #line hidden
            
            #line 42 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 43 ""
 foreach(var process in Network.Processes) {

       var busses = process.InputBusses.Union(process.OutputBusses).Union(process.InternalBusses).Distinct().OrderBy(x => x.Name).ToArray();

            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( process.Name ));
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(" proc_");
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( process.Name ));
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write("(");
            
            #line default
            #line hidden
            
            #line 47 ""
 foreach(var bus in busses) { 
            
            #line default
            #line hidden
            
            #line 48 ""
            this.Write("&bus_");
            
            #line default
            #line hidden
            
            #line 48 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 48 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus == busses.Last() ? "" : ", " ));
            
            #line default
            #line hidden
            
            #line 48 ""
 } 
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write(");\n");
            
            #line default
            #line hidden
            
            #line 50 ""
 } 
            
            #line default
            #line hidden
            
            #line 51 ""
            this.Write("\n    // Open the trace file and validate the headers\n    std::string line;\n    std::string token;\n    std::ifstream trace(tracefile);\n    if (trace.bad()) {\n        std::cout << \"File not found: \" << tracefile << std::endl;\n        return;\n    }\n\n    if (!std::getline(trace, line)) {\n        std::cout << \"File was empty: \" << tracefile << std::endl;\n        return;\n    }\n\n    std::istringstream headerlinestream(line);\n    size_t field = 0;\n    while(std::getline(headerlinestream, token, ',')) {\n        if (token.compare(SIGNAL_NAMES[field]) != 0) {\n            std::cout << \"Field #\" << field << \" should be named \" << SIGNAL_NAMES[field] << \" but is named \" << token << \", the trace file cannot be used\" << std::endl;\n            return;\n        }\n        field++;\n    }\n\n    size_t cycle = 0;\n    size_t i;\n    bool source_is_undef = false;\n\n    // Run all clock ticks\n    while(std::getline(trace, line)) {\n");
            
            #line default
            #line hidden
            
            #line 82 ""
 if (Network.Busses.Any(x => x.IsClocked)) { 
            
            #line default
            #line hidden
            
            #line 83 ""
            this.Write("        // Propagate clocked busses\n");
            
            #line default
            #line hidden
            
            #line 84 ""
     foreach(var bus in Network.Busses.Where(x => x.IsClocked)) { 
            
            #line default
            #line hidden
            
            #line 85 ""
            this.Write("        bus_");
            
            #line default
            #line hidden
            
            #line 85 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 85 ""
            this.Write(".Propagate();\n");
            
            #line default
            #line hidden
            
            #line 86 ""
     } 
            
            #line default
            #line hidden
            
            #line 87 ""
 } 
            
            #line default
            #line hidden
            
            #line 88 ""
            this.Write("        // Apply the source signals\n        std::istringstream valuestream(line);\n        field = 0;\n\n");
            
            #line default
            #line hidden
            
            #line 92 ""
 foreach (var signal in RS.DriverSignals) { 
       var cpptype = RS.TypeScope.GetType(signal);
       if (cpptype.IsArray) {
           var eltype = cpptype.ElementName;
           var length = (int)RS.GetArrayLength(signal).DefaultValue;

            
            #line default
            #line hidden
            
            #line 98 ""
            this.Write("        for (i = 0; i < ");
            
            #line default
            #line hidden
            
            #line 98 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( length ));
            
            #line default
            #line hidden
            
            #line 98 ""
            this.Write("; i++) {\n            if (!std::getline(valuestream, token, ',')) {\n                std::cout << \"Unexpected end-of-line in cycle \" << cycle << \", field \" << field << \", ");
            
            #line default
            #line hidden
            
            #line 100 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 100 ""
            this.Write("[\" << i << \"]\" << std::endl;\n                return;\n            }\n            if (token.compare(\"U\") != 0)\n                bus_");
            
            #line default
            #line hidden
            
            #line 104 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 104 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 104 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 104 ""
            this.Write("(i, parse_");
            
            #line default
            #line hidden
            
            #line 104 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));
            
            #line default
            #line hidden
            
            #line 104 ""
            this.Write("(token));            \n            field++;\n        }\n");
            
            #line default
            #line hidden
            
            #line 107 ""
     } else { 
            
            #line default
            #line hidden
            
            #line 108 ""
            this.Write("        if (!std::getline(valuestream, token, ',')) {\n            std::cout << \"Unexpected end-of-line in cycle \" << cycle << \", field \" << field << \", ");
            
            #line default
            #line hidden
            
            #line 109 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 109 ""
            this.Write("[\" << i << \"]\" << std::endl;\n            return;\n        }\n        if (token.compare(\"U\") != 0)\n            bus_");
            
            #line default
            #line hidden
            
            #line 113 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 113 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 113 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 113 ""
            this.Write("(parse_");
            
            #line default
            #line hidden
            
            #line 113 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Type(signal) ));
            
            #line default
            #line hidden
            
            #line 113 ""
            this.Write("(token));\n        field++;\n");
            
            #line default
            #line hidden
            
            #line 115 ""
     } 
            
            #line default
            #line hidden
            
            #line 116 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 117 ""
 } 
            
            #line default
            #line hidden
            
            #line 118 ""
            this.Write("\n        // Follow the query plan\n");
            
            #line default
            #line hidden
            
            #line 120 ""
 foreach(var n in Graph.ExecutionPlan) { 
       var pn = GetProcess(n.Item);
       if (pn != null) {

            
            #line default
            #line hidden
            
            #line 124 ""
            this.Write("        proc_");
            
            #line default
            #line hidden
            
            #line 124 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( pn.Name ));
            
            #line default
            #line hidden
            
            #line 124 ""
            this.Write(".onTick();\n");
            
            #line default
            #line hidden
            
            #line 125 ""
     } 
            
            #line default
            #line hidden
            
            #line 126 ""
     foreach(var b in n.Item.OutputBusses.Union(n.Item.InternalBusses)) { 
            
            #line default
            #line hidden
            
            #line 127 ""
            this.Write("        bus_");
            
            #line default
            #line hidden
            
            #line 127 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( GetBus(b).Name ));
            
            #line default
            #line hidden
            
            #line 127 ""
            this.Write(".forward_signals();\n");
            
            #line default
            #line hidden
            
            #line 128 ""
     } 
            
            #line default
            #line hidden
            
            #line 129 ""
     foreach(var b in n.PropagateAfter) { 
            
            #line default
            #line hidden
            
            #line 130 ""
            this.Write("        bus_");
            
            #line default
            #line hidden
            
            #line 130 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( GetBus(b).Name ));
            
            #line default
            #line hidden
            
            #line 130 ""
            this.Write(".propagate_signals();\n");
            
            #line default
            #line hidden
            
            #line 131 ""
     } 
            
            #line default
            #line hidden
            
            #line 132 ""
     foreach(var b in n.Item.InternalBusses) { 
            
            #line default
            #line hidden
            
            #line 133 ""
            this.Write("        bus_");
            
            #line default
            #line hidden
            
            #line 133 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( GetBus(b).Name ));
            
            #line default
            #line hidden
            
            #line 133 ""
            this.Write(".propagate_signals();\n");
            
            #line default
            #line hidden
            
            #line 134 ""
     } 
            
            #line default
            #line hidden
            
            #line 135 ""
 } 
            
            #line default
            #line hidden
            
            #line 136 ""
            this.Write("\n        // Verify the cycles\n");
            
            #line default
            #line hidden
            
            #line 138 ""
 foreach (var signal in RS.VerifySignals) {
       var cpptype = RS.TypeScope.GetType(signal);
       var typecast = cpptype.Name == "system_uint8" ? "(int)" : "";
       if (cpptype.IsArray) {
           typecast = cpptype.ElementName == "system_uint8" ? "(int)" : "";
           var eltype = cpptype.ElementName;
           var length = (int)RS.GetArrayLength(signal).DefaultValue;

            
            #line default
            #line hidden
            
            #line 146 ""
            this.Write("        for (i = 0; i < ");
            
            #line default
            #line hidden
            
            #line 146 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( length ));
            
            #line default
            #line hidden
            
            #line 146 ""
            this.Write("; i++) {\n            if (!std::getline(valuestream, token, ',')) {\n                std::cout << \"Unexpected end-of-line in cycle \" << cycle << \", field \" << field << std::endl;\n                return;\n            }\n\n            source_is_undef = false;\n            try {\n                ");
            
            #line default
            #line hidden
            
            #line 154 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));
            
            #line default
            #line hidden
            
            #line 154 ""
            this.Write(" tmpval = bus_");
            
            #line default
            #line hidden
            
            #line 154 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 154 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 154 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 154 ""
            this.Write("(i);\n            } catch (InvalidReadException e) {\n                source_is_undef = true;\n            }\n\n            if (token.compare(\"U\") == 0 && source_is_undef) {\n             // Don't care\n            } else if (token.compare(\"U\") != 0 && bus_");
            
            #line default
            #line hidden
            
            #line 161 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 161 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 161 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 161 ""
            this.Write("(i) != parse_");
            
            #line default
            #line hidden
            
            #line 161 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));
            
            #line default
            #line hidden
            
            #line 161 ""
            this.Write("(token)) {\n                std::cout << \"Error in cycle \" << cycle << std::endl;\n                std::cout << \"Expected value \" << ");
            
            #line default
            #line hidden
            
            #line 163 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( typecast ));
            
            #line default
            #line hidden
            
            #line 163 ""
            this.Write("parse_");
            
            #line default
            #line hidden
            
            #line 163 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));
            
            #line default
            #line hidden
            
            #line 163 ""
            this.Write("(token) << \", but got \" << ");
            
            #line default
            #line hidden
            
            #line 163 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( typecast ));
            
            #line default
            #line hidden
            
            #line 163 ""
            this.Write("bus_");
            
            #line default
            #line hidden
            
            #line 163 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 163 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 163 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 163 ""
            this.Write("(i) << \" for field \" << SIGNAL_NAMES[field] << \" (raw: \" << token << \")\" << std::endl;\n                return;\n            }\n            field++;\n        }\n\n");
            
            #line default
            #line hidden
            
            #line 169 ""
     } else { 
            
            #line default
            #line hidden
            
            #line 170 ""
            this.Write("        if (!std::getline(valuestream, token, ',')) {\n            std::cout << \"Unexpected end-of-line in cycle \" << cycle << \", field \" << field << std::endl;\n            return;\n        }\n\n        source_is_undef = false;\n        try {\n            ");
            
            #line default
            #line hidden
            
            #line 177 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Type(signal) ));
            
            #line default
            #line hidden
            
            #line 177 ""
            this.Write(" tmpval = bus_");
            
            #line default
            #line hidden
            
            #line 177 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 177 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 177 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 177 ""
            this.Write("();\n        } catch (InvalidReadException e) {\n            source_is_undef = true;\n        }\n\n        if (token.compare(\"U\") == 0 && source_is_undef) {\n            // Don't care\n        } else if (token.compare(\"U\") != 0 && bus_");
            
            #line default
            #line hidden
            
            #line 184 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 184 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 184 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 184 ""
            this.Write("() != parse_");
            
            #line default
            #line hidden
            
            #line 184 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Type(signal) ));
            
            #line default
            #line hidden
            
            #line 184 ""
            this.Write("(token)) {\n            std::cout << \"Error in cycle \" << cycle << std::endl;\n            std::cout << \"Expected value \" << ");
            
            #line default
            #line hidden
            
            #line 186 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( typecast ));
            
            #line default
            #line hidden
            
            #line 186 ""
            this.Write("parse_");
            
            #line default
            #line hidden
            
            #line 186 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Type(signal) ));
            
            #line default
            #line hidden
            
            #line 186 ""
            this.Write("(token) << \", but got \" << ");
            
            #line default
            #line hidden
            
            #line 186 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( typecast ));
            
            #line default
            #line hidden
            
            #line 186 ""
            this.Write("bus_");
            
            #line default
            #line hidden
            
            #line 186 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 186 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 186 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 186 ""
            this.Write("() << \" for field \" << SIGNAL_NAMES[field] << \" (raw: \" << token << \")\" << std::endl;\n            return;\n        }\n        field++;\n");
            
            #line default
            #line hidden
            
            #line 190 ""
     } 
            
            #line default
            #line hidden
            
            #line 191 ""
 } 
            
            #line default
            #line hidden
            
            #line 192 ""
            this.Write("\n        cycle++;\n    }\n\n    std::cout << \"Completed \" << cycle << \" simulation cycles\" << std::endl;\n}\n\n\nint main()\n{\n\n// Insert additional startup code here\n// #### USER-DATA-STARTUP-CODE-START\n// #### USER-DATA-STARTUP-CODE-END\n\n    try\n    {\n        RunSimulation(\"");
            
            #line default
            #line hidden
            
            #line 209 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.CSVTracename ));
            
            #line default
            #line hidden
            
            #line 209 ""
            this.Write("\");\n    } catch (SignalException s) {\n        std::cout << s.signal << std::endl;\n        throw s;\n    }\n    return 0;\n}\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class TopLevelBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
