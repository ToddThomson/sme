// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace SME.CPP.Templates {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class SimulationImplementation : SimulationImplementationBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 1 ""
            this.Write("﻿");
            
            #line default
            #line hidden
            
            #line 6 ""
            this.Write("#include \"");
            
            #line default
            #line hidden
            
            #line 6 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.SimulatorFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 6 ""
            this.Write(".hpp\"\n\n// The names of all signals\nstd::string ");
            
            #line default
            #line hidden
            
            #line 9 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 9 ""
            this.Write("_SIGNAL_NAMES[] = {\n");
            
            #line default
            #line hidden
            
            #line 10 ""
 foreach (var signal in RS.DriverSignals.Union(RS.VerifySignals)) { 
       var cpptype = RS.TypeScope.GetType(signal);
       if (cpptype.IsArray) {
           var eltype = cpptype.ElementName;
           var length = (int)RS.GetArrayLength(signal).DefaultValue;
           for(var i = 0; i < length; i++) {

            
            #line default
            #line hidden
            
            #line 17 ""
            this.Write("    \"");
            
            #line default
            #line hidden
            
            #line 17 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.TestBenchSignalName(signal) ));
            
            #line default
            #line hidden
            
            #line 17 ""
            this.Write("(");
            
            #line default
            #line hidden
            
            #line 17 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( i ));
            
            #line default
            #line hidden
            
            #line 17 ""
            this.Write(")\",\n");
            
            #line default
            #line hidden
            
            #line 18 ""
         } 
            
            #line default
            #line hidden
            
            #line 19 ""
     } else { 
            
            #line default
            #line hidden
            
            #line 20 ""
            this.Write("    \"");
            
            #line default
            #line hidden
            
            #line 20 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.TestBenchSignalName(signal) ));
            
            #line default
            #line hidden
            
            #line 20 ""
            this.Write("\",\n");
            
            #line default
            #line hidden
            
            #line 21 ""
     } 
            
            #line default
            #line hidden
            
            #line 22 ""
 } 
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write("};\n\n\n");
            
            #line default
            #line hidden
            
            #line 26 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 26 ""
            this.Write("::");
            
            #line default
            #line hidden
            
            #line 26 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 26 ""
            this.Write("() \n    :\n");
            
            #line default
            #line hidden
            
            #line 28 ""
 foreach(var bus in Network.Busses) { 
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write("        bus_");
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write("(),\n");
            
            #line default
            #line hidden
            
            #line 30 ""
 } 
            
            #line default
            #line hidden
            
            #line 31 ""
 foreach(var process in Network.Processes) {

       var busses = process.InputBusses.Union(process.OutputBusses).Union(process.InternalBusses).Distinct().OrderBy(x => x.Name).ToArray();

            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write("        proc_");
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( process.Name ));
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write("(");
            
            #line default
            #line hidden
            
            #line 35 ""
 foreach(var bus in busses) { 
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write("&bus_");
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus == busses.Last() ? "" : ", " ));
            
            #line default
            #line hidden
            
            #line 36 ""
 } 
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write("),\n");
            
            #line default
            #line hidden
            
            #line 38 ""
 } 
            
            #line default
            #line hidden
            
            #line 39 ""
            this.Write("        trace_input(NULL),\n        input_line(),\n        cycle(0)\n{\n\n}\n\nsize_t ");
            
            #line default
            #line hidden
            
            #line 46 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 46 ""
            this.Write("::RunSimulation(const char* inputfile)\n{\n    LoadTraceInput(inputfile);\n\n    while(true) {\n        if (!DriveFromTraceInput()) {\n            size_t res = cycle;\n            Stop();\n            return res;\n        }\n        OnTick();\n        VerifyTrace();\n        FinishCycle();\n    }\n}\n\nvoid ");
            
            #line default
            #line hidden
            
            #line 62 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 62 ""
            this.Write("::LoadTraceInput(const char* inputfile)\n{\n    if (trace_input != NULL)\n       throw MessageException(\"Already have an input trace file open\");\n\n    // Open the trace file and validate the headers\n    trace_input = new std::ifstream(inputfile);\n    if (trace_input->bad()) {\n        trace_input->close();\n        throw MessageException(\"Trace input file not found, or not able to open\");\n    }\n\n    if (!std::getline(*trace_input, input_line)) {\n        throw MessageException(\"Trace input file was empty\");\n    }\n\n    if (cycle != 0) {\n        throw MessageException(\"Cannot load input file after the simulation has started\");\n    }\n\n    std::string token;\n    std::istringstream headerlinestream(input_line);\n    size_t field = 0;\n    while(std::getline(headerlinestream, token, ',')) {\n        if (token.compare(");
            
            #line default
            #line hidden
            
            #line 86 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 86 ""
            this.Write("_SIGNAL_NAMES[field]) != 0) {\n\n            std::stringstream sstm;\n            sstm << \"Field #\" << field << \" should be named \" << ");
            
            #line default
            #line hidden
            
            #line 89 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 89 ""
            this.Write("_SIGNAL_NAMES[field] << \" but is named \" << token << \", the trace file cannot be used\";\n            throw MessageException(sstm.str());\n        }\n        field++;\n    }\n\n    cycle = 0;\n}\n\n");
            
            #line default
            #line hidden
            
            #line 98 ""
 var driver_signal_count = 0; 
            
            #line default
            #line hidden
            
            #line 99 ""
            this.Write("\nbool ");
            
            #line default
            #line hidden
            
            #line 100 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 100 ""
            this.Write("::DriveFromTraceInput()\n{\n    if (trace_input == NULL) {\n        throw MessageException(\"Trace input file is not loaded\");\n    }\n\n    if (!std::getline(*trace_input, input_line)) {\n        return false;\n    }\n\n    size_t i;\n    std::string token;\n    std::istringstream valuestream(input_line);\n    size_t field = 0;\n\n");
            
            #line default
            #line hidden
            
            #line 115 ""
  foreach (var signal in RS.DriverSignals) { 
       var cpptype = RS.TypeScope.GetType(signal);
       if (cpptype.IsArray) {
           var eltype = cpptype.ElementName;
           var length = (int)RS.GetArrayLength(signal).DefaultValue;
           driver_signal_count += length;

            
            #line default
            #line hidden
            
            #line 122 ""
            this.Write("    for (i = 0; i < ");
            
            #line default
            #line hidden
            
            #line 122 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( length ));
            
            #line default
            #line hidden
            
            #line 122 ""
            this.Write("; i++) {\n        if (!std::getline(valuestream, token, ',')) {\n            std::stringstream sstm;\n            sstm << \"Unexpected end-of-line in cycle \" << cycle << \", field \" << field << \", ");
            
            #line default
            #line hidden
            
            #line 125 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 125 ""
            this.Write("[\" << i << \"]\" << std::endl;\n            throw MessageException(sstm.str());\n        }\n        if (token.compare(\"U\") != 0)\n            bus_");
            
            #line default
            #line hidden
            
            #line 129 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 129 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 129 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 129 ""
            this.Write("(i, parse_");
            
            #line default
            #line hidden
            
            #line 129 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));
            
            #line default
            #line hidden
            
            #line 129 ""
            this.Write("(token));            \n        field++;\n    }\n");
            
            #line default
            #line hidden
            
            #line 132 ""
     
       } else {
           driver_signal_count++;

            
            #line default
            #line hidden
            
            #line 136 ""
            this.Write("    if (!std::getline(valuestream, token, ',')) {\n        std::stringstream sstm;\n        sstm << \"Unexpected end-of-line in cycle \" << cycle << \", field \" << field << \", ");
            
            #line default
            #line hidden
            
            #line 138 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 138 ""
            this.Write("[\" << i << \"]\" << std::endl;\n        throw MessageException(sstm.str());\n    }\n    if (token.compare(\"U\") != 0)\n        bus_");
            
            #line default
            #line hidden
            
            #line 142 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 142 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 142 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 142 ""
            this.Write("(parse_");
            
            #line default
            #line hidden
            
            #line 142 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.TypeScope.GetType(signal).Name ));
            
            #line default
            #line hidden
            
            #line 142 ""
            this.Write("(token));\n    field++;\n");
            
            #line default
            #line hidden
            
            #line 144 ""
     } 
            
            #line default
            #line hidden
            
            #line 145 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 146 ""
 } 
            
            #line default
            #line hidden
            
            #line 147 ""
            this.Write("\n    return true;\n}\n\nvoid ");
            
            #line default
            #line hidden
            
            #line 151 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 151 ""
            this.Write("::FinishCycle() \n{\n    cycle++;\n");
            
            #line default
            #line hidden
            
            #line 154 ""
 if (Network.Busses.Any(x => x.IsClocked)) { 
            
            #line default
            #line hidden
            
            #line 155 ""
            this.Write("        // Propagate clocked busses\n");
            
            #line default
            #line hidden
            
            #line 156 ""
     foreach(var bus in Network.Busses.Where(x => x.IsClocked)) { 
            
            #line default
            #line hidden
            
            #line 157 ""
            this.Write("        bus_");
            
            #line default
            #line hidden
            
            #line 157 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 157 ""
            this.Write(".Propagate();\n");
            
            #line default
            #line hidden
            
            #line 158 ""
     } 
            
            #line default
            #line hidden
            
            #line 159 ""
 } 
            
            #line default
            #line hidden
            
            #line 160 ""
            this.Write("}\n\nvoid ");
            
            #line default
            #line hidden
            
            #line 162 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 162 ""
            this.Write("::OnTick()\n{\n\n");
            
            #line default
            #line hidden
            
            #line 165 ""
 foreach(var n in Graph.ExecutionPlan) { 
       var pn = GetProcess(n.Item);
       if (pn != null) {

            
            #line default
            #line hidden
            
            #line 169 ""
            this.Write("    proc_");
            
            #line default
            #line hidden
            
            #line 169 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( pn.Name ));
            
            #line default
            #line hidden
            
            #line 169 ""
            this.Write(".onTick();\n");
            
            #line default
            #line hidden
            
            #line 170 ""
     } 
            
            #line default
            #line hidden
            
            #line 171 ""
     foreach(var b in n.Item.OutputBusses.Union(n.Item.InternalBusses)) { 
            
            #line default
            #line hidden
            
            #line 172 ""
            this.Write("    bus_");
            
            #line default
            #line hidden
            
            #line 172 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( GetBus(b).Name ));
            
            #line default
            #line hidden
            
            #line 172 ""
            this.Write(".forward_signals();\n");
            
            #line default
            #line hidden
            
            #line 173 ""
     } 
            
            #line default
            #line hidden
            
            #line 174 ""
     foreach(var b in n.PropagateAfter) { 
            
            #line default
            #line hidden
            
            #line 175 ""
            this.Write("    bus_");
            
            #line default
            #line hidden
            
            #line 175 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( GetBus(b).Name ));
            
            #line default
            #line hidden
            
            #line 175 ""
            this.Write(".propagate_signals();\n");
            
            #line default
            #line hidden
            
            #line 176 ""
     } 
            
            #line default
            #line hidden
            
            #line 177 ""
     foreach(var b in n.Item.InternalBusses) { 
            
            #line default
            #line hidden
            
            #line 178 ""
            this.Write("    bus_");
            
            #line default
            #line hidden
            
            #line 178 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( GetBus(b).Name ));
            
            #line default
            #line hidden
            
            #line 178 ""
            this.Write(".propagate_signals();\n");
            
            #line default
            #line hidden
            
            #line 179 ""
     } 
            
            #line default
            #line hidden
            
            #line 180 ""
 } 
            
            #line default
            #line hidden
            
            #line 181 ""
            this.Write("}\n\nvoid ");
            
            #line default
            #line hidden
            
            #line 183 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 183 ""
            this.Write("::VerifyTrace()\n{\n    if (trace_input == NULL) {\n        throw MessageException(\"Trace input file is not loaded\");\n    }\n\n    size_t i;\n    size_t field = 0;\n    std::string token;\n    std::istringstream valuestream(input_line);\n\n    // Forward past the ");
            
            #line default
            #line hidden
            
            #line 194 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( driver_signal_count ));
            
            #line default
            #line hidden
            
            #line 194 ""
            this.Write(" signals\n    for(i = 0; i < ");
            
            #line default
            #line hidden
            
            #line 195 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( driver_signal_count ));
            
            #line default
            #line hidden
            
            #line 195 ""
            this.Write("; i++) {\n        if (!std::getline(valuestream, token, ',')) {\n            throw MessageException(\"Unexpected end-of-stream\");\n        }\n        field++;\n    }\n\n    bool source_is_undef;\n\n");
            
            #line default
            #line hidden
            
            #line 204 ""
 foreach (var signal in RS.VerifySignals) {
       var cpptype = RS.TypeScope.GetType(signal);
       var typecast = cpptype.Name == "system_uint8" ? "(int)" : "";
       if (cpptype.IsArray) {
           typecast = cpptype.ElementName == "system_uint8" ? "(int)" : "";
           var eltype = cpptype.ElementName;
           var length = (int)RS.GetArrayLength(signal).DefaultValue;

            
            #line default
            #line hidden
            
            #line 212 ""
            this.Write("    for (i = 0; i < ");
            
            #line default
            #line hidden
            
            #line 212 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( length ));
            
            #line default
            #line hidden
            
            #line 212 ""
            this.Write("; i++) {\n        if (!std::getline(valuestream, token, ',')) {\n            std::stringstream sstm;\n            sstm << \"Unexpected end-of-line in cycle \" << cycle << \", field \" << field << std::endl;\n            throw MessageException(sstm.str());\n        }\n\n        source_is_undef = false;\n        try {\n            ");
            
            #line default
            #line hidden
            
            #line 221 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));
            
            #line default
            #line hidden
            
            #line 221 ""
            this.Write(" tmpval = bus_");
            
            #line default
            #line hidden
            
            #line 221 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 221 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 221 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 221 ""
            this.Write("(i);\n        } catch (InvalidReadException e) {\n            source_is_undef = true;\n        }\n\n        if (token.compare(\"U\") == 0 && source_is_undef) {\n         // Don't care\n        } else if (token.compare(\"U\") != 0 && bus_");
            
            #line default
            #line hidden
            
            #line 228 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 228 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 228 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 228 ""
            this.Write("(i) != parse_");
            
            #line default
            #line hidden
            
            #line 228 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));
            
            #line default
            #line hidden
            
            #line 228 ""
            this.Write("(token)) {\n            std::stringstream sstm;\n            sstm << \"Error in cycle \" << cycle << std::endl;\n            sstm << \"Expected value \" << ");
            
            #line default
            #line hidden
            
            #line 231 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( typecast ));
            
            #line default
            #line hidden
            
            #line 231 ""
            this.Write("parse_");
            
            #line default
            #line hidden
            
            #line 231 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));
            
            #line default
            #line hidden
            
            #line 231 ""
            this.Write("(token) << \", but got \" << ");
            
            #line default
            #line hidden
            
            #line 231 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( typecast ));
            
            #line default
            #line hidden
            
            #line 231 ""
            this.Write("bus_");
            
            #line default
            #line hidden
            
            #line 231 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 231 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 231 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 231 ""
            this.Write("(i) << \" for field \" << ");
            
            #line default
            #line hidden
            
            #line 231 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 231 ""
            this.Write("_SIGNAL_NAMES[field] << \" (raw: \" << token << \")\" << std::endl;\n            throw MessageException(sstm.str());\n        }\n        field++;\n    }\n\n");
            
            #line default
            #line hidden
            
            #line 237 ""
     } else { 
            
            #line default
            #line hidden
            
            #line 238 ""
            this.Write("    if (!std::getline(valuestream, token, ',')) {\n        std::stringstream sstm;\n        sstm << \"Unexpected end-of-line in cycle \" << cycle << \", field \" << field << std::endl;\n        throw MessageException(sstm.str());\n    }\n\n    source_is_undef = false;\n    try {\n        ");
            
            #line default
            #line hidden
            
            #line 246 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.TypeScope.GetType(signal).Name ));
            
            #line default
            #line hidden
            
            #line 246 ""
            this.Write(" tmpval = bus_");
            
            #line default
            #line hidden
            
            #line 246 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 246 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 246 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 246 ""
            this.Write("();\n    } catch (InvalidReadException e) {\n        source_is_undef = true;\n    }\n\n    if (token.compare(\"U\") == 0 && source_is_undef) {\n        // Don't care\n    } else if (token.compare(\"U\") != 0 && bus_");
            
            #line default
            #line hidden
            
            #line 253 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 253 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 253 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 253 ""
            this.Write("() != parse_");
            
            #line default
            #line hidden
            
            #line 253 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.TypeScope.GetType(signal).Name ));
            
            #line default
            #line hidden
            
            #line 253 ""
            this.Write("(token)) {\n        std::stringstream sstm;\n        sstm << \"Error in cycle \" << cycle << std::endl;\n        sstm << \"Expected value \" << ");
            
            #line default
            #line hidden
            
            #line 256 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( typecast ));
            
            #line default
            #line hidden
            
            #line 256 ""
            this.Write("parse_");
            
            #line default
            #line hidden
            
            #line 256 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.TypeScope.GetType(signal).Name ));
            
            #line default
            #line hidden
            
            #line 256 ""
            this.Write("(token) << \", but got \" << ");
            
            #line default
            #line hidden
            
            #line 256 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( typecast ));
            
            #line default
            #line hidden
            
            #line 256 ""
            this.Write("bus_");
            
            #line default
            #line hidden
            
            #line 256 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Parent.Name ));
            
            #line default
            #line hidden
            
            #line 256 ""
            this.Write(".");
            
            #line default
            #line hidden
            
            #line 256 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 256 ""
            this.Write("() << \" for field \" << ");
            
            #line default
            #line hidden
            
            #line 256 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 256 ""
            this.Write("_SIGNAL_NAMES[field] << \" (raw: \" << token << \")\" << std::endl;\n        throw MessageException(sstm.str());\n    }\n    field++;\n");
            
            #line default
            #line hidden
            
            #line 260 ""
     } 
            
            #line default
            #line hidden
            
            #line 261 ""
 } 
            
            #line default
            #line hidden
            
            #line 262 ""
            this.Write("}\n\nvoid ");
            
            #line default
            #line hidden
            
            #line 264 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));
            
            #line default
            #line hidden
            
            #line 264 ""
            this.Write("::Stop()\n{\n    if (trace_input != NULL) {\n        trace_input->close();\n        delete trace_input;\n    }\n}\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class SimulationImplementationBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
