﻿<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#include <iostream>
#include <fstream>
#include <sstream>
#include "SystemTypes.hpp"
#include "<#= Naming.BusDefinitionsFileName(Network) #>"

<# foreach(var process in Network.Processes) { #>
#include "<#= process.Name #>.hpp"
<# } #>

// Insert additional includes and methods here
// #### USER-DATA-INCLUDE-START
// #### USER-DATA-INCLUDE-END

// The names of all signals
std::string SIGNAL_NAMES[] = {
<# foreach (var signal in RS.DriverSignals.Union(RS.VerifySignals)) { 
       var cpptype = RS.TypeScope.GetType(signal);
       if (cpptype.IsArray) {
           var eltype = cpptype.ElementName;
           var length = (int)RS.GetArrayLength(signal).DefaultValue;
           for(var i = 0; i < length; i++) {
#>
    "<#= RS.TestBenchSignalName(signal) #>(<#= i #>)",
<#         } #>
<#     } else { #>
    "<#= RS.TestBenchSignalName(signal) #>",
<#     } #>
<# } #>
};

void RunSimulation(const char* tracefile)
{
<# foreach(var bus in Network.Busses) { #>
    <#= bus.Name #> bus_<#= bus.Name #>;
<# } #>

<# foreach(var process in Network.Processes) {

       var busses = process.InputBusses.Union(process.OutputBusses).Union(process.InternalBusses).Distinct().OrderBy(x => x.Name).ToArray();
#>
    <#= process.Name #> proc_<#= process.Name #>(<# foreach(var bus in busses) { #>&bus_<#= bus.Name #><#= bus == busses.Last() ? "" : ", " #><# } #>);
<# } #>

    // Open the trace file and validate the headers
    std::string line;
    std::string token;
    std::ifstream trace(tracefile);
    if (trace.bad()) {
        std::cout << "File not found: " << tracefile << std::endl;
        return;
    }

    if (!std::getline(trace, line)) {
        std::cout << "File was empty: " << tracefile << std::endl;
        return;
    }

    std::istringstream headerlinestream(line);
    size_t field = 0;
    while(std::getline(headerlinestream, token, ',')) {
        if (token.compare(SIGNAL_NAMES[field]) != 0) {
            std::cout << "Field #" << field << " should be named " << SIGNAL_NAMES[field] << " but is named " << token << ", the trace file cannot be used" << std::endl;
            return;
        }
        field++;
    }

    size_t cycle = 0;
    size_t i;
    bool source_is_undef = false;

    // Run all clock ticks
    while(std::getline(trace, line)) {
<# if (Network.Busses.Any(x => x.IsClocked)) { #>
        // Propagate clocked busses
<#     foreach(var bus in Network.Busses.Where(x => x.IsClocked)) { #>
        bus_<#= bus.Name #>.Propagate();
<#     } #>
<# } #>
        // Apply the source signals
        std::istringstream valuestream(line);
        field = 0;

<# foreach (var signal in RS.DriverSignals) { 
       var cpptype = RS.TypeScope.GetType(signal);
       if (cpptype.IsArray) {
           var eltype = cpptype.ElementName;
           var length = (int)RS.GetArrayLength(signal).DefaultValue;
#>
        for (i = 0; i < <#= length #>; i++) {
            if (!std::getline(valuestream, token, ',')) {
                std::cout << "Unexpected end-of-line in cycle " << cycle << ", field " << field << ", <#= signal.Name #>[" << i << "]" << std::endl;
                return;
            }
            if (token.compare("U") != 0)
                bus_<#= signal.Parent.Name #>.<#= signal.Name #>(i, parse_<#= eltype #>(token));            
            field++;
        }
<#     } else { #>
        if (!std::getline(valuestream, token, ',')) {
            std::cout << "Unexpected end-of-line in cycle " << cycle << ", field " << field << ", <#= signal.Name #>[" << i << "]" << std::endl;
            return;
        }
        if (token.compare("U") != 0)
            bus_<#= signal.Parent.Name #>.<#= signal.Name #>(parse_<#= Type(signal) #>(token));
        field++;
<#     } #>

<# } #>

        // Follow the query plan
<# foreach(var n in Graph.ExecutionPlan) { 
       var pn = GetProcess(n.Item);
       if (pn != null) {
#>
        proc_<#= pn.Name #>.onTick();
<#     } #>
<#     foreach(var b in n.Item.OutputBusses.Union(n.Item.InternalBusses)) { #>
        bus_<#= GetBus(b).Name #>.forward_signals();
<#     } #>
<#     foreach(var b in n.PropagateAfter) { #>
        bus_<#= GetBus(b).Name #>.propagate_signals();
<#     } #>
<#     foreach(var b in n.Item.InternalBusses) { #>
        bus_<#= GetBus(b).Name #>.propagate_signals();
<#     } #>
<# } #>

        // Verify the cycles
<# foreach (var signal in RS.VerifySignals) {
       var cpptype = RS.TypeScope.GetType(signal);
       var typecast = cpptype.Name == "system_uint8" ? "(int)" : "";
       if (cpptype.IsArray) {
           typecast = cpptype.ElementName == "system_uint8" ? "(int)" : "";
           var eltype = cpptype.ElementName;
           var length = (int)RS.GetArrayLength(signal).DefaultValue;
#>
        for (i = 0; i < <#= length #>; i++) {
            if (!std::getline(valuestream, token, ',')) {
                std::cout << "Unexpected end-of-line in cycle " << cycle << ", field " << field << std::endl;
                return;
            }

            source_is_undef = false;
            try {
                <#= eltype #> tmpval = bus_<#= signal.Parent.Name #>.<#= signal.Name #>(i);
            } catch (InvalidReadException e) {
                source_is_undef = true;
            }

            if (token.compare("U") == 0 && source_is_undef) {
             // Don't care
            } else if (token.compare("U") != 0 && bus_<#= signal.Parent.Name #>.<#= signal.Name #>(i) != parse_<#= eltype #>(token)) {
                std::cout << "Error in cycle " << cycle << std::endl;
                std::cout << "Expected value " << <#= typecast #>parse_<#= eltype #>(token) << ", but got " << <#= typecast #>bus_<#= signal.Parent.Name #>.<#= signal.Name #>(i) << " for field " << SIGNAL_NAMES[field] << " (raw: " << token << ")" << std::endl;
                return;
            }
            field++;
        }

<#     } else { #>
        if (!std::getline(valuestream, token, ',')) {
            std::cout << "Unexpected end-of-line in cycle " << cycle << ", field " << field << std::endl;
            return;
        }

        source_is_undef = false;
        try {
            <#= Type(signal) #> tmpval = bus_<#= signal.Parent.Name #>.<#= signal.Name #>();
        } catch (InvalidReadException e) {
            source_is_undef = true;
        }

        if (token.compare("U") == 0 && source_is_undef) {
            // Don't care
        } else if (token.compare("U") != 0 && bus_<#= signal.Parent.Name #>.<#= signal.Name #>() != parse_<#= Type(signal) #>(token)) {
            std::cout << "Error in cycle " << cycle << std::endl;
            std::cout << "Expected value " << <#= typecast #>parse_<#= Type(signal) #>(token) << ", but got " << <#= typecast #>bus_<#= signal.Parent.Name #>.<#= signal.Name #>() << " for field " << SIGNAL_NAMES[field] << " (raw: " << token << ")" << std::endl;
            return;
        }
        field++;
<#     } #>
<# } #>

        cycle++;
    }

    std::cout << "Completed " << cycle << " simulation cycles" << std::endl;
}


int main()
{

// Insert additional startup code here
// #### USER-DATA-STARTUP-CODE-START
// #### USER-DATA-STARTUP-CODE-END

    try
    {
        RunSimulation("<#= RS.CSVTracename #>");
    } catch (SignalException s) {
        std::cout << s.signal << std::endl;
        throw s;
    }
    return 0;
}
