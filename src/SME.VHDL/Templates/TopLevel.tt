<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="SME" #>
<#@ import namespace="SME.VHDL" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SME.AST" #>
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

-- library SYSTEM_TYPES;
use work.SYSTEM_TYPES.ALL;

-- library CUSTOM_TYPES;
use work.CUSTOM_TYPES.ALL;

-- User defined packages here
-- #### USER-DATA-IMPORTS-START
-- #### USER-DATA-IMPORTS-END

entity <#= Network.Name #> is
  port(

<#
var feedbacks = RS.FeedbackBusses.ToArray();
var processes = Network.Processes.Where(x => !x.IsSimulation).ToArray();
#>

<# foreach (var bus in Network.Busses.Where(x => !x.IsInternal)) { 
	var signaltype = "inout"; 

	if (bus.IsTopLevelInput && !bus.IsTopLevelOutput)
		signaltype = "in";
	else if (bus.IsTopLevelOutput && !bus.IsTopLevelInput)
		signaltype = "out";
#>
    -- Top-level bus <#= bus.Name #> signals
<#     foreach (var signal in bus.Signals) { #>
    <#= bus.InstanceName #>_<#= signal.Name #>: <#= signaltype #> <#= RS.VHDLWrappedTypeName(signal) #>;
<#     } #>

<# } #>

    -- User defined signals here
    -- #### USER-DATA-ENTITYSIGNALS-START
    -- #### USER-DATA-ENTITYSIGNALS-END

    -- Enable signal
    ENB : in Std_logic;

    -- Finished signal
    FIN : out Std_logic;

	-- Reset signal
    RST : in Std_logic;

	-- Clock signal
	CLK : in Std_logic
  );
end <#= Network.Name #>;

architecture RTL of <#= Network.Name #> is  
  -- User defined signals here
  -- #### USER-DATA-SIGNALS-START
  -- #### USER-DATA-SIGNALS-END

  -- Internal wiring signals for clocked processes
<# foreach (var bus in Network.Busses.Where(x => !x.IsInternal && x.IsClocked && !feedbacks.Contains(x))) { #>
<#     foreach (var signal in bus.Signals) { #>
    signal <#= bus.InstanceName #>_<#= signal.Name #>_next: <#= RS.VHDLWrappedTypeName(signal) #>;
<#     } #>
<# } #>
<# if (feedbacks.Length > 0) { #>

    -- Feedback signals
<#     foreach (var bus in feedbacks) { #>
<#         foreach (var signal in bus.Signals) { #>
    signal <#= bus.InstanceName #>_<#= signal.Name #>_current, <#= bus.InstanceName #>_<#= signal.Name #>_next: <#= RS.VHDLWrappedTypeName(signal) #>;
<#         } #>
<#     } #>
<# } #>

  -- Process ready triggers
<# foreach (var p in processes) { #>
  signal RDY_<#= p.InstanceName #>, FIN_<#= p.InstanceName #> : std_logic;
<# } #>

  -- The primary ready driver signal
  signal RDY : std_logic;

begin

  -- Propagate all clocked processes
<# foreach (var p in processes.Where(x => x.IsClocked)) { #>
  RDY_<#= p.InstanceName #> <= CLK;
<# } #>

<# foreach (var p in processes) { #>

    -- Entity  <#= p.InstanceName #> signals
    <#= p.InstanceName #>: entity work.<#= p.Name #>
    port map (
<#    foreach (var bus in p.InputBusses.Union(p.OutputBusses).Distinct()) { 
	      var isInput = p.InputBusses.Contains(bus);
	      var isOutput = p.OutputBusses.Contains(bus);
	      var isBoth = isInput && isOutput;
	      var type = "Input/Output";
	      if (isInput && !isOutput)
	          type = "Input";
	      else if (isOutput && !isInput)
	          type = "Output";

	      var output_suffix = string.Empty;
	      var input_suffix = string.Empty;
	      if (bus.IsClocked || feedbacks.Contains(bus))
	          output_suffix = "_next";
	      if (feedbacks.Contains(bus))
	          input_suffix = "_current";

          var signals = bus.Signals.AsEnumerable();

	      if (isOutput && !isBoth)
	      	signals = RS.WrittenSignals(p, bus);
#>
        -- <#= type #> bus <#= bus.Name #>
<#		  foreach(var signal in signals) { #>
<#              if (isInput || isBoth) { #>
        <#= bus.Name #>_<#= signal.Name #> => <#= bus.InstanceName #>_<#= signal.Name #><#= input_suffix #>,
<#              } else { #>
        <#= bus.Name #>_<#= signal.Name #> => <#= bus.InstanceName #>_<#= signal.Name #><#= output_suffix #>,
<#              } #>
<#        } #>

<#        if (isBoth) { #>
<#		      foreach(var signal in bus.Signals) { #>
        out_<#= bus.Name #>_<#= signal.Name #> => <#= bus.InstanceName #>_<#= signal.Name #><#= output_suffix #>,
<#            } #>
<#        } #>

<#    } #>

        -- Initialization values
<#     foreach (var variable in p.SharedVariables) { #>
        <#= variable.Name #>_reset_value => <#= RS.GetResetExpression(variable) #>,
<#     } #>
<#     foreach (var variable in p.SharedSignals) { #>
        <#= variable.Name #>_reset_value => <#= RS.GetResetExpression(variable) #>,
<#     } #>

        RDY => RDY_<#= p.InstanceName #>,
        FIN => FIN_<#= p.InstanceName #>,
        RST => RST
    );

<# } #>

    -- Connect ready signals
<# foreach (var p in processes) { 
       var parents = RS.DependsOn(p).ToArray();
       if (parents.Length == 0) { #>
    RDY_<#= p.InstanceName #> <= RDY;
<#     } else if (parents.Length == 1) { #>
    RDY_<#= p.InstanceName #> <= RDY_<#= parents.First().InstanceName #>;
<#     } else { #>
    -- Setup the RDY signal for <#= p.InstanceName #>
    process(
      <#= string.Join(", " + Environment.NewLine + "      ", processes.Select(x => string.Format("FIN_{0}", x.InstanceName))) #>
    )
    begin
      if <#= string.Join(" AND ", parents.Skip(1).Select(x => string.Format("FIN_{0} = FIN_{1}", parents.First().InstanceName, x.InstanceName))) #> then
        RDY_<#= p.InstanceName #> <= RDY_<#= parents.First().InstanceName #>;
      end if;
    end process;

    RDY_<#= p.InstanceName #> <= <#= string.Join(" AND ", parents.Select(x => string.Format("RDY_{0}", x.InstanceName))) #>;
<#     } #>
<# } #>

    -- Setup the FIN feedback signal
<# if (processes.Length == 1) { #>
        FIN <= FIN_<#= processes.First().InstanceName #>;
<# } else { #>
    process(
      <#= string.Join(", " + Environment.NewLine + "      ", processes.Select(x => string.Format("FIN_{0}", x.InstanceName))) #>
    )
    begin
      if <#= string.Join(" AND ", processes.Skip(1).Select(x => string.Format("FIN_{0} = FIN_{1}", processes.First().InstanceName, x.InstanceName))) #> then
        FIN <= FIN_<#= processes.First().InstanceName #>;
      end if;
    end process;
<# } #>

    -- Propagate all feedback signals immediately
<# foreach(var bus in feedbacks) { #>
<#     foreach (var signal in bus.Signals) { #>
    <#= bus.InstanceName #>_<#= signal.Name #> <= <#= bus.InstanceName #>_<#= signal.Name #><#= bus.IsClocked ? "_current" : "_next" #>;
<#     } #>
<# } #>

    -- Propagate all clocked and feedback signals
    process(
        CLK,
        RST)
    begin
        if RST = '1' then
<# foreach(var bus in Network.Busses.Where(x => !x.IsInternal && x.IsClocked && !feedbacks.Contains(x))) { #>
<#     foreach (var signal in bus.Signals) { #>
            <#= bus.InstanceName #>_<#= signal.Name #> <= <#= RS.DefaultValue(signal) #>;
<#     } #>
<# } #>
<# foreach(var bus in feedbacks) { #>
<#     foreach (var signal in bus.Signals) { #>
            <#= bus.InstanceName #>_<#= signal.Name #>_current <= <#= RS.DefaultValue(signal) #>;
<#     } #>

<# } #>
            RDY <= '0';
        elsif rising_edge(CLK) and ENB = '1' then
<# foreach(var bus in Network.Busses.Where(x => !x.IsInternal && x.IsClocked && !feedbacks.Contains(x))) { #>
<#     foreach (var signal in bus.Signals) { #>
            <#= bus.InstanceName #>_<#= signal.Name #> <= <#= bus.InstanceName #>_<#= signal.Name #>_next;
<#     } #>
<# } #>

<# foreach(var bus in feedbacks) { #>
<#     foreach (var signal in bus.Signals) { #>
            <#= bus.InstanceName #>_<#= signal.Name #>_current <= <#= bus.InstanceName #>_<#= signal.Name #>_next;
<#     } #>

<# } #>

            RDY <= not RDY;

        end if;
    end process;

-- User defined processes here
-- #### USER-DATA-CODE-START
-- #### USER-DATA-CODE-END

end RTL;