//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SME.VHDL.Templates {
    using System.Linq;
    using SME;
    using SME.VHDL;
    using System.Text;
    using System.Collections.Generic;
    using SME.AST;
    using System;
    
    
    public partial class ExportTopLevel : ExportTopLevelBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 9 ""
            this.Write(@"library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

-- library SYSTEM_TYPES;
use work.SYSTEM_TYPES.ALL;

-- library CUSTOM_TYPES;
use work.CUSTOM_TYPES.ALL;

-- User defined packages here
-- #### USER-DATA-IMPORTS-START
-- #### USER-DATA-IMPORTS-END

entity ");
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Network.Name ));
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write("_export is\n  port(\n\n");
            
            #line default
            #line hidden
            
            #line 26 ""
 foreach (var bus in Network.Busses.Where(x => x.IsTopLevelInput || x.IsTopLevelOutput)) {
	var signaltype = "inout"; 

	if (bus.IsTopLevelInput && !bus.IsTopLevelOutput)
		signaltype = "in";
	else if (bus.IsTopLevelOutput && !bus.IsTopLevelInput)
		signaltype = "out";
	
            
            #line default
            #line hidden
            
            #line 34 ""
            this.Write("    -- Top-level bus ");
            
            #line default
            #line hidden
            
            #line 34 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 34 ""
            this.Write(" signals\n");
            
            #line default
            #line hidden
            
            #line 35 ""
     foreach (var signal in bus.Signals) { 
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.InstanceName ));
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write("_");
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(": ");
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signaltype ));
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.VHDLExportTypeName(signal) ));
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 37 ""
     } 
            
            #line default
            #line hidden
            
            #line 38 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 39 ""
 } 
            
            #line default
            #line hidden
            
            #line 40 ""
            this.Write("\n    -- User defined signals here\n    -- #### USER-DATA-ENTITYSIGNALS-START\n    -" +
                    "- #### USER-DATA-ENTITYSIGNALS-END\n\n\t-- Reset signal\n    RST : in STD_LOGIC;\n\n  " +
                    "  -- Clock signal\n    CLK : in STD_LOGIC\n  );\nend ");
            
            #line default
            #line hidden
            
            #line 51 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Network.Name ));
            
            #line default
            #line hidden
            
            #line 51 ""
            this.Write("_export;\n\n\n");
            
            #line default
            #line hidden
            
            #line 54 ""

var converted_outputs = new HashSet<AST.Signal>();

foreach (var bus in Network.Busses.Where(x => x.IsTopLevelOutput && !x.IsTopLevelInput)) 
{ 
    foreach(var signal in bus.Signals) 
    {
        var vt = RS.VHDLType(signal);
        if (vt.IsSystemSigned || vt.IsSystemUnsigned) 
        {
            converted_outputs.Add(signal);
        }
    }
}

            
            #line default
            #line hidden
            
            #line 69 ""
            this.Write("\narchitecture RTL of ");
            
            #line default
            #line hidden
            
            #line 70 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Network.Name ));
            
            #line default
            #line hidden
            
            #line 70 ""
            this.Write("_export is  \n  -- User defined signals here\n  -- #### USER-DATA-SIGNALS-START\n  -" +
                    "- #### USER-DATA-SIGNALS-END\n\n");
            
            #line default
            #line hidden
            
            #line 75 ""
 if (converted_outputs.Count > 0) { 
            
            #line default
            #line hidden
            
            #line 76 ""
            this.Write("  -- Intermediate conversion signal to convert internal types to external ones\n");
            
            #line default
            #line hidden
            
            #line 77 ""
     foreach(var signal in converted_outputs) { 
            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write("  signal tmp_");
            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( ((AST.Bus)signal.Parent).InstanceName ));
            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write("_");
            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write(" : ");
            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.VHDLWrappedTypeName(signal) ));
            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 79 ""
     } 
            
            #line default
            #line hidden
            
            #line 80 ""
 } 
            
            #line default
            #line hidden
            
            #line 81 ""
            this.Write("\nbegin\n");
            
            #line default
            #line hidden
            
            #line 83 ""
 if (converted_outputs.Count > 0) { 
            
            #line default
            #line hidden
            
            #line 84 ""
            this.Write("\n    -- Carry converted signals from entity to wrapped outputs\n");
            
            #line default
            #line hidden
            
            #line 86 ""
     foreach(var signal in converted_outputs) { 
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write("  ");
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( ((AST.Bus)signal.Parent).InstanceName ));
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write("_");
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(" <= std_logic_vector(tmp_");
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( ((AST.Bus)signal.Parent).InstanceName ));
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write("_");
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write(");\n");
            
            #line default
            #line hidden
            
            #line 88 ""
     } 
            
            #line default
            #line hidden
            
            #line 89 ""
 } 
            
            #line default
            #line hidden
            
            #line 90 ""
            this.Write("\n    -- Entity ");
            
            #line default
            #line hidden
            
            #line 91 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Network.Name ));
            
            #line default
            #line hidden
            
            #line 91 ""
            this.Write(" signals\n    ");
            
            #line default
            #line hidden
            
            #line 92 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Network.Name ));
            
            #line default
            #line hidden
            
            #line 92 ""
            this.Write(": entity work.");
            
            #line default
            #line hidden
            
            #line 92 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Network.Name ));
            
            #line default
            #line hidden
            
            #line 92 ""
            this.Write("\n    port map (\n");
            
            #line default
            #line hidden
            
            #line 94 ""
    foreach (var bus in Network.Busses.Where(x => x.IsTopLevelInput || x.IsTopLevelOutput)) { 
	      var type = "Input/Output"; 

	      if (bus.IsTopLevelInput && !bus.IsTopLevelOutput)
		      type = "Input";
	      else if (bus.IsTopLevelOutput && !bus.IsTopLevelInput)
		      type = "Output";
	
            
            #line default
            #line hidden
            
            #line 102 ""
            this.Write("        -- ");
            
            #line default
            #line hidden
            
            #line 102 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( type ));
            
            #line default
            #line hidden
            
            #line 102 ""
            this.Write(" bus ");
            
            #line default
            #line hidden
            
            #line 102 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 102 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 103 ""
		  foreach(var signal in bus.Signals) {
              var vt = RS.VHDLType(signal);

            
            #line default
            #line hidden
            
            #line 106 ""
            if (converted_outputs.Contains(signal)) { 
            
            #line default
            #line hidden
            
            #line 107 ""
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 107 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.InstanceName ));
            
            #line default
            #line hidden
            
            #line 107 ""
            this.Write("_");
            
            #line default
            #line hidden
            
            #line 107 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 107 ""
            this.Write(" => tmp_");
            
            #line default
            #line hidden
            
            #line 107 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.InstanceName ));
            
            #line default
            #line hidden
            
            #line 107 ""
            this.Write("_");
            
            #line default
            #line hidden
            
            #line 107 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 107 ""
            this.Write(",\n");
            
            #line default
            #line hidden
            
            #line 108 ""
            } else if (vt.IsSystemType && vt.IsUnsigned) { 
            
            #line default
            #line hidden
            
            #line 109 ""
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 109 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.InstanceName ));
            
            #line default
            #line hidden
            
            #line 109 ""
            this.Write("_");
            
            #line default
            #line hidden
            
            #line 109 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 109 ""
            this.Write(" => unsigned(");
            
            #line default
            #line hidden
            
            #line 109 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.InstanceName ));
            
            #line default
            #line hidden
            
            #line 109 ""
            this.Write("_");
            
            #line default
            #line hidden
            
            #line 109 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 109 ""
            this.Write("),\n");
            
            #line default
            #line hidden
            
            #line 110 ""
            } else if (vt.IsSystemType && vt.IsSigned) { 
            
            #line default
            #line hidden
            
            #line 111 ""
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 111 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.InstanceName ));
            
            #line default
            #line hidden
            
            #line 111 ""
            this.Write("_");
            
            #line default
            #line hidden
            
            #line 111 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 111 ""
            this.Write(" => signed(");
            
            #line default
            #line hidden
            
            #line 111 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.InstanceName ));
            
            #line default
            #line hidden
            
            #line 111 ""
            this.Write("_");
            
            #line default
            #line hidden
            
            #line 111 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 111 ""
            this.Write("),\n");
            
            #line default
            #line hidden
            
            #line 112 ""
            } else { 
            
            #line default
            #line hidden
            
            #line 113 ""
            this.Write("        ");
            
            #line default
            #line hidden
            
            #line 113 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.InstanceName ));
            
            #line default
            #line hidden
            
            #line 113 ""
            this.Write("_");
            
            #line default
            #line hidden
            
            #line 113 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 113 ""
            this.Write(" => ");
            
            #line default
            #line hidden
            
            #line 113 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.InstanceName ));
            
            #line default
            #line hidden
            
            #line 113 ""
            this.Write("_");
            
            #line default
            #line hidden
            
            #line 113 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 113 ""
            this.Write(",\n");
            
            #line default
            #line hidden
            
            #line 114 ""
            } 
            
            #line default
            #line hidden
            
            #line 115 ""
        } 
            
            #line default
            #line hidden
            
            #line 116 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 117 ""
    } 
            
            #line default
            #line hidden
            
            #line 118 ""
            this.Write("        RST => RST,\n        CLK => CLK\n    );\n\n-- User defined processes here\n-- " +
                    "#### USER-DATA-CODE-START\n-- #### USER-DATA-CODE-END\n\nend RTL;");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class ExportTopLevelBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
