//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SME.VHDL.Templates {
    using System.Linq;
    using SME;
    using System.Text;
    using System.Collections.Generic;
    using SME.VHDL;
    using SME.AST;
    using System;
    
    
    public partial class Entity : EntityBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 9 ""
            this.Write(@"library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

-- library SYSTEM_TYPES;
use work.SYSTEM_TYPES.ALL;

-- library CUSTOM_TYPES;
use work.CUSTOM_TYPES.ALL;

-- User defined packages here
-- #### USER-DATA-IMPORTS-START
-- #### USER-DATA-IMPORTS-END


entity ");
            
            #line default
            #line hidden
            
            #line 24 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Process.Name ));
            
            #line default
            #line hidden
            
            #line 24 ""
            this.Write(" is\n  port(\n");
            
            #line default
            #line hidden
            
            #line 26 ""
 foreach (var bus in Process.InputBusses.Where(x => !Process.OutputBusses.Contains(x))) { 
            
            #line default
            #line hidden
            
            #line 27 ""
            this.Write("    -- Input bus ");
            
            #line default
            #line hidden
            
            #line 27 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 27 ""
            this.Write(" signals\n");
            
            #line default
            #line hidden
            
            #line 28 ""
     foreach (var signal in bus.Signals) { 
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write("_");
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(": in ");
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.VHDLWrappedTypeName(signal) ));
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 30 ""
     } 
            
            #line default
            #line hidden
            
            #line 31 ""
 } 
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 33 ""
 foreach (var bus in Process.OutputBusses.Where(x => !Process.InputBusses.Contains(x))) { 
            
            #line default
            #line hidden
            
            #line 34 ""
            this.Write("    -- Output bus ");
            
            #line default
            #line hidden
            
            #line 34 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 34 ""
            this.Write(" signals\n");
            
            #line default
            #line hidden
            
            #line 35 ""
     foreach (var signal in RSP.WrittenSignals(bus)) { 
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write("_");
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(": out ");
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.VHDLWrappedTypeName(signal) ));
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 37 ""
     } 
            
            #line default
            #line hidden
            
            #line 38 ""
 } 
            
            #line default
            #line hidden
            
            #line 39 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 40 ""
 foreach (var bus in Process.InputBusses.Where(x => Process.OutputBusses.Contains(x))) { 
            
            #line default
            #line hidden
            
            #line 41 ""
            this.Write("    -- Input/output bus ");
            
            #line default
            #line hidden
            
            #line 41 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 41 ""
            this.Write(" signals\n");
            
            #line default
            #line hidden
            
            #line 42 ""
     foreach (var signal in bus.Signals) { 
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write("_");
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write(": in ");
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.VHDLWrappedTypeName(signal) ));
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 44 ""
     } 
            
            #line default
            #line hidden
            
            #line 45 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 46 ""
     foreach (var signal in bus.Signals) { 
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write("    out_");
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write("_");
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(": out ");
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.VHDLWrappedTypeName(signal) ));
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 48 ""
     } 
            
            #line default
            #line hidden
            
            #line 49 ""
 } 
            
            #line default
            #line hidden
            
            #line 50 ""
            this.Write("\n    -- Initialization values\n");
            
            #line default
            #line hidden
            
            #line 52 ""
 foreach (var variable in Process.SharedVariables) { 
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( variable.Name ));
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write("_reset_value: in ");
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.VHDLWrappedTypeName(variable) ));
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 54 ""
 } 
            
            #line default
            #line hidden
            
            #line 55 ""
 foreach (var variable in Process.SharedSignals) { 
            
            #line default
            #line hidden
            
            #line 56 ""
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 56 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( variable.Name ));
            
            #line default
            #line hidden
            
            #line 56 ""
            this.Write("_reset_value: in ");
            
            #line default
            #line hidden
            
            #line 56 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.VHDLWrappedTypeName(variable) ));
            
            #line default
            #line hidden
            
            #line 56 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 57 ""
 } 
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write("\n    -- Ready signal\n    RDY : in Std_logic;\n\n    -- Finished signal\n    FIN : ou" +
                    "t Std_logic;\n\n    -- Reset signal\n    RST : in Std_logic\n );\nend ");
            
            #line default
            #line hidden
            
            #line 68 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Process.Name ));
            
            #line default
            #line hidden
            
            #line 68 ""
            this.Write(";\n\narchitecture RTL of ");
            
            #line default
            #line hidden
            
            #line 70 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Process.Name ));
            
            #line default
            #line hidden
            
            #line 70 ""
            this.Write(" is\n");
            
            #line default
            #line hidden
            
            #line 71 ""
 foreach (var bus in Process.InternalBusses) { 
            
            #line default
            #line hidden
            
            #line 72 ""
            this.Write("  -- Internal bus ");
            
            #line default
            #line hidden
            
            #line 72 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 72 ""
            this.Write(" signals\n");
            
            #line default
            #line hidden
            
            #line 73 ""
     foreach (var signal in bus.Signals) { 
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write("  signal ");
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write("_");
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write(": ");
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.VHDLWrappedTypeName(signal) ));
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 75 ""
     } 
            
            #line default
            #line hidden
            
            #line 76 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 77 ""
 } 
            
            #line default
            #line hidden
            
            #line 78 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 79 ""
 if (Process.SharedSignals.Any()) { 
            
            #line default
            #line hidden
            
            #line 80 ""
            this.Write("  -- Internal signals\n");
            
            #line default
            #line hidden
            
            #line 81 ""
     foreach (var s in Process.SharedSignals) { 
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write("  signal ");
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( s.Name ));
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write(" : ");
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.VHDLWrappedTypeName(s) ));
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 83 ""
     } 
            
            #line default
            #line hidden
            
            #line 84 ""
 } 
            
            #line default
            #line hidden
            
            #line 85 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 86 ""
 if (RSP.IsComponent) { 
            
            #line default
            #line hidden
            
            #line 87 ""
            this.Write("  -- Component declaration and signals\n");
            
            #line default
            #line hidden
            
            #line 88 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RSP.ComponentSignals ));
            
            #line default
            #line hidden
            
            #line 88 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 89 ""
 } 
            
            #line default
            #line hidden
            
            #line 90 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 91 ""
 if (Process.Methods != null && Process.Methods.Any(x => !x.Ignore)) { 
            
            #line default
            #line hidden
            
            #line 92 ""
            this.Write("  -- Internal methods\n");
            
            #line default
            #line hidden
            
            #line 93 ""
     foreach (var s in Process.Methods.Where(x => !x.Ignore)) { 
            
            #line default
            #line hidden
            
            #line 94 ""
         foreach(var line in RSP.Helper.RenderMethod(s)) { 
            
            #line default
            #line hidden
            
            #line 95 ""
            this.Write("  ");
            
            #line default
            #line hidden
            
            #line 95 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( line ));
            
            #line default
            #line hidden
            
            #line 95 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 96 ""
         } 
            
            #line default
            #line hidden
            
            #line 97 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 98 ""
     } 
            
            #line default
            #line hidden
            
            #line 99 ""
 } 
            
            #line default
            #line hidden
            
            #line 100 ""
            this.Write("\n\n  -- User defined signals, procedures and components here\n  -- #### USER-DATA-S" +
                    "IGNALS-START\n  -- #### USER-DATA-SIGNALS-END\n\nbegin\n\n    -- Custom processes go " +
                    "here\n    -- #### USER-DATA-PROCESSES-START\n    -- #### USER-DATA-PROCESSES-END\n\n" +
                    "");
            
            #line default
            #line hidden
            
            #line 112 ""
 if (RSP.IsComponent) { 
            
            #line default
            #line hidden
            
            #line 113 ""
            this.Write("    -- Component instantiation\n");
            
            #line default
            #line hidden
            
            #line 114 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RSP.ComponentProcesses ));
            
            #line default
            #line hidden
            
            #line 114 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 115 ""
 } else { 
            
            #line default
            #line hidden
            
            #line 116 ""
            this.Write("\n    process(\n        -- Custom sensitivity signals here\n        -- #### USER-DAT" +
                    "A-SENSITIVITY-START\n        -- #### USER-DATA-SENSITIVITY-END\n        RDY,\n     " +
                    "   RST\n    )\n");
            
            #line default
            #line hidden
            
            #line 124 ""
         if (RSP.Variables.Count() > 0) { 
            
            #line default
            #line hidden
            
            #line 125 ""
            this.Write("    -- Internal variables\n");
            
            #line default
            #line hidden
            
            #line 126 ""
         } 
            
            #line default
            #line hidden
            
            #line 127 ""
         foreach(var s in RSP.Variables) { 
            
            #line default
            #line hidden
            
            #line 128 ""
            this.Write("    variable ");
            
            #line default
            #line hidden
            
            #line 128 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( s.Name ));
            
            #line default
            #line hidden
            
            #line 128 ""
            this.Write(" : ");
            
            #line default
            #line hidden
            
            #line 128 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.VHDLWrappedTypeName(s) ));
            
            #line default
            #line hidden
            
            #line 128 ""
            this.Write(";\n");
            
            #line default
            #line hidden
            
            #line 129 ""
         } 
            
            #line default
            #line hidden
            
            #line 130 ""
            this.Write(@"
    variable reentry_guard : Std_logic;

    -- #### USER-DATA-NONCLOCKEDVARIABLES-START
    -- #### USER-DATA-NONCLOCKEDVARIABLES-END
	begin
        -- Initialize code here
        -- #### USER-DATA-NONCLOCKEDSHAREDINITIALIZECODE-START
        -- #### USER-DATA-NONCLOCKEDSHAREDINITIALIZECODE-END

        if RST = '1' then
");
            
            #line default
            #line hidden
            
            #line 141 ""
     foreach(var s in RSP.ProcessResetStaments) { 
            
            #line default
            #line hidden
            
            #line 142 ""
            this.Write("            ");
            
            #line default
            #line hidden
            
            #line 142 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( s ));
            
            #line default
            #line hidden
            
            #line 142 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 143 ""
     } 
            
            #line default
            #line hidden
            
            #line 144 ""
     foreach(var variable in Process.SharedVariables) { 
            
            #line default
            #line hidden
            
            #line 145 ""
            this.Write("            ");
            
            #line default
            #line hidden
            
            #line 145 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( variable.Name ));
            
            #line default
            #line hidden
            
            #line 145 ""
            this.Write(" := ");
            
            #line default
            #line hidden
            
            #line 145 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( variable.Name ));
            
            #line default
            #line hidden
            
            #line 145 ""
            this.Write("_reset_value;\n");
            
            #line default
            #line hidden
            
            #line 146 ""
     } 
            
            #line default
            #line hidden
            
            #line 147 ""
     foreach(var variable in Process.SharedSignals) { 
            
            #line default
            #line hidden
            
            #line 148 ""
            this.Write("            ");
            
            #line default
            #line hidden
            
            #line 148 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( variable.Name ));
            
            #line default
            #line hidden
            
            #line 148 ""
            this.Write(" <= ");
            
            #line default
            #line hidden
            
            #line 148 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( variable.Name ));
            
            #line default
            #line hidden
            
            #line 148 ""
            this.Write("_reset_value;\n");
            
            #line default
            #line hidden
            
            #line 149 ""
     } 
            
            #line default
            #line hidden
            
            #line 150 ""
            this.Write(@"
            reentry_guard := '1';
            FIN <= '0';

            -- Initialize code here
            -- #### USER-DATA-NONCLOCKEDRESETCODE-START
            -- #### USER-DATA-NONCLOCKEDRESETCODE-END
        else

            if RDY /= reentry_guard then

                reentry_guard := RDY;

                -- Initialize code here
                -- #### USER-DATA-NONCLOCKEDINITIALIZECODE-START
                -- #### USER-DATA-NONCLOCKEDINITIALIZECODE-END


");
            
            #line default
            #line hidden
            
            #line 168 ""
     foreach(var line in RSP.Helper.RenderMethod(Process.MainMethod)) { 
            
            #line default
            #line hidden
            
            #line 169 ""
            this.Write("                ");
            
            #line default
            #line hidden
            
            #line 169 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( line ));
            
            #line default
            #line hidden
            
            #line 169 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 170 ""
     } 
            
            #line default
            #line hidden
            
            #line 171 ""
            this.Write("\n                FIN <= RDY;\n\n            end if;\n        end if;\n\n        -- Non" +
                    "-clocked process actions here\n\n        -- #### USER-DATA-CODE-START\n        -- #" +
                    "### USER-DATA-CODE-END\n\n    end process;\n");
            
            #line default
            #line hidden
            
            #line 183 ""
 } 
            
            #line default
            #line hidden
            
            #line 184 ""
            this.Write("\nend RTL;\n\n-- User defined architectures here\n-- #### USER-DATA-ARCH-START\n-- ###" +
                    "# USER-DATA-ARCH-END\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class EntityBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
