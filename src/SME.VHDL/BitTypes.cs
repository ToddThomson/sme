// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace SME.VHDL {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class BitTypes : BitTypesBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 6 ""

	

            
            #line default
            #line hidden
            
            #line 9 ""
            this.Write("using System;\nusing System.Diagnostics;\n\nnamespace SME.Render.VHDL\n{\n\tinternal static class UIntFormatHelper\n\t{\n\t\tpublic static string ToBinaryString(ulong value, int width)\n\t\t{\n\t\t\tvar res = new char[width];\n\t\t\tfor (var i = 0; i < width; i++)\n\t\t\t\tres[width - 1 - i] = ((value >> i) & 0x1) == 0x1 ? '1' : '0';\n\n\t\t\treturn new string(res);\n\t\t}\n\t}\n\n\tinternal static class IntFormatHelper\n\t{\n\t\tpublic static string ToBinaryString(long value, int width)\n\t\t{\n\t\t\tvar res = new char[width];\n\t\t\tfor (var i = 0; i < width; i++)\n                res[width - 1 - i] = ((value >> i) & 0x1) == 0x1 ? '1' : '0';\n\n\t\t\treturn new string(res);\n\t\t}\n\t}\n\n");
            
            #line default
            #line hidden
            
            #line 38 ""
 for(var i = 1; i < 64; i++) { 
            
            #line default
            #line hidden
            
            #line 39 ""
 if (i == 8 || i == 16 || i == 32 || i == 64) continue; 
            
            #line default
            #line hidden
            
            #line 40 ""
            this.Write("\t[DebuggerDisplay(\"{Value}\")]\n\t[VHDLType(\"STD_LOGIC_VECTOR(");
            
            #line default
            #line hidden
            
            #line 41 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( i-1 ));
            
            #line default
            #line hidden
            
            #line 41 ""
            this.Write(" downto 0)\", \"T_UINT");
            
            #line default
            #line hidden
            
            #line 41 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 41 ""
            this.Write("\")]\n\tpublic struct UInt");
            
            #line default
            #line hidden
            
            #line 42 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 42 ""
            this.Write(" : ITracerSerializable {\n");
            
            #line default
            #line hidden
            
            #line 43 ""
 
	string dtype;
	if (i <= 8)
		dtype = "byte";
	else if (i <= 16)
		dtype = "ushort";
	else if (i <= 8)
		dtype = "uint";
	else
		dtype = "ulong";

	var bitmask = string.Format("0x{0:x}", (1Lu << i) - 1);

            
            #line default
            #line hidden
            
            #line 56 ""
            this.Write("\n\t\tprivate readonly ");
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( dtype ));
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write(" Value;\n\t\tprivate const int WIDTH = ");
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 58 ""
            this.Write(";\n\n\t\tpublic UInt");
            
            #line default
            #line hidden
            
            #line 60 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 60 ""
            this.Write("(");
            
            #line default
            #line hidden
            
            #line 60 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( dtype ));
            
            #line default
            #line hidden
            
            #line 60 ""
            this.Write(" v)\n\t\t{\n\t\t\tthis.Value = (");
            
            #line default
            #line hidden
            
            #line 62 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( dtype ));
            
            #line default
            #line hidden
            
            #line 62 ""
            this.Write(")(v & ");
            
            #line default
            #line hidden
            
            #line 62 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bitmask ));
            
            #line default
            #line hidden
            
            #line 62 ""
            this.Write(");\n\t\t}\n\n\t\tpublic static implicit operator UInt");
            
            #line default
            #line hidden
            
            #line 65 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 65 ""
            this.Write("(");
            
            #line default
            #line hidden
            
            #line 65 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( dtype ));
            
            #line default
            #line hidden
            
            #line 65 ""
            this.Write(" v)\n\t\t{\n\t\t\treturn new UInt");
            
            #line default
            #line hidden
            
            #line 67 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 67 ""
            this.Write("(v);\n\t\t}\n\n\t\tpublic static implicit operator ");
            
            #line default
            #line hidden
            
            #line 70 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( dtype ));
            
            #line default
            #line hidden
            
            #line 70 ""
            this.Write("(UInt");
            
            #line default
            #line hidden
            
            #line 70 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 70 ""
            this.Write(" v)\n\t\t{\n\t\t\treturn (");
            
            #line default
            #line hidden
            
            #line 72 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( dtype ));
            
            #line default
            #line hidden
            
            #line 72 ""
            this.Write(")(v.Value & ");
            
            #line default
            #line hidden
            
            #line 72 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bitmask ));
            
            #line default
            #line hidden
            
            #line 72 ""
            this.Write(");\n\t\t}\n\n\t\tpublic static UInt");
            
            #line default
            #line hidden
            
            #line 75 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 75 ""
            this.Write(" operator++(UInt");
            
            #line default
            #line hidden
            
            #line 75 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 75 ""
            this.Write(" v) \n\t\t{\n\t\t\treturn new UInt");
            
            #line default
            #line hidden
            
            #line 77 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 77 ""
            this.Write("((");
            
            #line default
            #line hidden
            
            #line 77 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( dtype ));
            
            #line default
            #line hidden
            
            #line 77 ""
            this.Write(")(v + 1));\n\t\t}\n\n\t\tpublic static UInt");
            
            #line default
            #line hidden
            
            #line 80 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 80 ""
            this.Write(" operator--(UInt");
            
            #line default
            #line hidden
            
            #line 80 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 80 ""
            this.Write(" v) \n\t\t{\n\t\t\treturn new UInt");
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write("((");
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( dtype ));
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write(")(v - 1));\n\t\t}\n\n\t\tpublic override string ToString()\n\t\t{\n\t\t\treturn Value.ToString();\n\t\t}\n\n\t\tstring ITracerSerializable.Serialize(SME.Tracer.Tracer tracer)\n\t\t{\n\t\t\treturn UIntFormatHelper.ToBinaryString(this.Value, WIDTH);\n\t\t}\n\t};\n\n");
            
            #line default
            #line hidden
            
            #line 96 ""
 } 
            
            #line default
            #line hidden
            
            #line 97 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 98 ""
 for(var i = 1; i < 64; i++) { 
            
            #line default
            #line hidden
            
            #line 99 ""
 if (i == 8 || i == 16 || i == 32 || i == 64) continue; 
            
            #line default
            #line hidden
            
            #line 100 ""
            this.Write("\t[DebuggerDisplay(\"{Value}\")]\n\t[VHDLType(\"STD_LOGIC_VECTOR(");
            
            #line default
            #line hidden
            
            #line 101 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( i-1 ));
            
            #line default
            #line hidden
            
            #line 101 ""
            this.Write(" downto 0)\", \"T_INT");
            
            #line default
            #line hidden
            
            #line 101 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 101 ""
            this.Write("\")]\n\tpublic struct Int");
            
            #line default
            #line hidden
            
            #line 102 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 102 ""
            this.Write(" : ICSVSerializable {\n");
            
            #line default
            #line hidden
            
            #line 103 ""
 
	string dtype;
	if (i <= 8)
		dtype = "sbyte";
	else if (i <= 16)
		dtype = "short";
	else if (i <= 8)
		dtype = "int";
	else
		dtype = "long";

	var bitmask = string.Format("0x{0:x}", (1Lu << i) - 1);

            
            #line default
            #line hidden
            
            #line 116 ""
            this.Write("\n\t\tprivate readonly ");
            
            #line default
            #line hidden
            
            #line 117 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( dtype ));
            
            #line default
            #line hidden
            
            #line 117 ""
            this.Write(" Value;\n\t\tprivate const int WIDTH = ");
            
            #line default
            #line hidden
            
            #line 118 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 118 ""
            this.Write(";\n\n\t\tpublic Int");
            
            #line default
            #line hidden
            
            #line 120 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 120 ""
            this.Write("(");
            
            #line default
            #line hidden
            
            #line 120 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( dtype ));
            
            #line default
            #line hidden
            
            #line 120 ""
            this.Write(" v)\n\t\t{\n\t\t\tthis.Value = (");
            
            #line default
            #line hidden
            
            #line 122 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( dtype ));
            
            #line default
            #line hidden
            
            #line 122 ""
            this.Write(")(v & ");
            
            #line default
            #line hidden
            
            #line 122 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bitmask ));
            
            #line default
            #line hidden
            
            #line 122 ""
            this.Write(");\n\t\t}\n\n\t\tpublic static implicit operator Int");
            
            #line default
            #line hidden
            
            #line 125 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 125 ""
            this.Write("(");
            
            #line default
            #line hidden
            
            #line 125 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( dtype ));
            
            #line default
            #line hidden
            
            #line 125 ""
            this.Write(" v)\n\t\t{\n\t\t\treturn new Int");
            
            #line default
            #line hidden
            
            #line 127 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 127 ""
            this.Write("(v);\n\t\t}\n\n\t\tpublic static implicit operator ");
            
            #line default
            #line hidden
            
            #line 130 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( dtype ));
            
            #line default
            #line hidden
            
            #line 130 ""
            this.Write("(Int");
            
            #line default
            #line hidden
            
            #line 130 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 130 ""
            this.Write(" v)\n\t\t{\n\t\t\treturn (");
            
            #line default
            #line hidden
            
            #line 132 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( dtype ));
            
            #line default
            #line hidden
            
            #line 132 ""
            this.Write(")(v.Value & ");
            
            #line default
            #line hidden
            
            #line 132 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bitmask ));
            
            #line default
            #line hidden
            
            #line 132 ""
            this.Write(");\n\t\t}\n\n\t\tpublic static Int");
            
            #line default
            #line hidden
            
            #line 135 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 135 ""
            this.Write(" operator++(Int");
            
            #line default
            #line hidden
            
            #line 135 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 135 ""
            this.Write(" v) \n\t\t{\n\t\t\treturn new Int");
            
            #line default
            #line hidden
            
            #line 137 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 137 ""
            this.Write("((");
            
            #line default
            #line hidden
            
            #line 137 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( dtype ));
            
            #line default
            #line hidden
            
            #line 137 ""
            this.Write(")(v + 1));\n\t\t}\n\n\t\tpublic static Int");
            
            #line default
            #line hidden
            
            #line 140 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 140 ""
            this.Write(" operator--(Int");
            
            #line default
            #line hidden
            
            #line 140 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 140 ""
            this.Write(" v) \n\t\t{\n\t\t\treturn new Int");
            
            #line default
            #line hidden
            
            #line 142 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 142 ""
            this.Write("((");
            
            #line default
            #line hidden
            
            #line 142 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( dtype ));
            
            #line default
            #line hidden
            
            #line 142 ""
            this.Write(")(v - 1));\n\t\t}\n\n\t\tpublic override string ToString()\n\t\t{\n\t\t\treturn Value.ToString();\n\t\t}\n\n\t\tstring ICSVSerializable.Serialize()\n\t\t{\n\t\t\treturn IntFormatHelper.ToBinaryString(this.Value, WIDTH);\n\t\t}\n\t};\n\n");
            
            #line default
            #line hidden
            
            #line 156 ""
 } 
            
            #line default
            #line hidden
            
            #line 157 ""
            this.Write("}\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class BitTypesBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
